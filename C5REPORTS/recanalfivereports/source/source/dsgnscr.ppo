#line 38 "\fwh\include\fivewin.ch"
      static bError
#line 219 "hbclass.ch"
DECLARE HBClass  New( cName AS STRING, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS OBJECT  Instance() AS OBJECT  AddClsMethod( cName AS STRING, @MethodName(), nScope AS NUMERIC, n2 AS NUMERIC, n3 AS NUMERIC )  AddMultiClsData( cType AS STRING, uVal, nScope AS NUMERIC, aDatas AS ARRAY OF STRING )  AddMultiData( cType AS STRING, uVal, nScope AS NUMERIC, aDatas AS ARRAY OF STRING, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS STRING, @MethodName(), nScope AS NUMERIC )  AddInLine( cName AS STRING, bBlock AS CODEBLOCK, nScope AS NUMERIC )  AddVirtual( cName AS STRING )
#line 79 "\fwh\include\fivewin.ch"
         EXTERNAL FW_GT











extern errorsys
#line 5 "source\dsgnscr.prg"
_HB_CLASS TDsgnScroll ; function TDsgnScroll ( ... ) ; static s_oClass ; local nScope, oClass, oInstance ; if s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; begin sequence ; nScope := 1 ; ( ( nScope ) ) ; oClass := IIF(.F.,, HBClass():new( "TDsgnScroll" , iif( .T., { @TShape() }, { @HBObject() } ), @TDsgnScroll() ) ) ;

; _HB_MEMBER { aProperties } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aProperties"}, .F. )

; _HB_MEMBER { lFlat } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lFlat"}, .F. )
; _HB_MEMBER { lActive } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lActive"}, .F. )
; _HB_MEMBER { lVertical } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lVertical"}, .F. )

      _HB_MEMBER New( nTop, nLeft, nBottom, nRight, oWnd, lVertical) AS CLASS TDsgnScroll; oClass:AddMethod( "New", @TDsgnScroll_New(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER Paint( hDC); oClass:AddMethod( "Paint", @TDsgnScroll_Paint(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER ContextMenu( nRow, nCol); oClass:AddMethod( "ContextMenu", @TDsgnScroll_ContextMenu(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


oClass:Create() ; ; oInstance := oClass:Instance() ; if __ObjHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; end ; always ; __clsUnlockDef( @s_oClass, oClass ) ; end ; return oInstance ; end ; return s_oClass:Instance() AS CLASS TDsgnScroll ;


      static FUNCTION TDsgnScroll_New( nTop, nLeft, nBottom, nRight, oWnd, lVertical ) ; local Self AS CLASS TDsgnScroll := QSelf() AS CLASS TDsgnScroll


if lVertical == nil; lVertical := .T.; endif

   if nTop <> nil .AND. (nBottom-nTop < 10 .OR. nRight-nLeft < 10)
      if lVertical
         nBottom := nTop + 65
         nRight  := nLeft + 18
      else
         nBottom := nTop + 18
         nRight  := nLeft + 60
      endif
   endif

  ::cObjName         := ::GetObjName()


   ::TShape:New( nTop, nLeft, nBottom, nRight, oWnd )

   ::lVertical     := lVertical
   ::lFlat         := .F.
   ::lActive       := .T.

   ::bContextMenu := {|nRow,nCol| ::ContextMenu( nRow, nCol ) }













   ::aProperties := { "aDotsActives"   , "aRect"          , "lActive"        , "lVertical"      , "lCanSize" , "lCanMove"       , "lFlat"          , "lVisible"       , "xMaxHeight"     , "xMaxWidth"      , "xMinHeight"     , "xMinWidth"      }

  if oCbxComponentes() <> nil
     oCbxComponentes():Add( ::cObjName )
  endif

return self




  static FUNCTION TDsgnScroll_Paint( hDC ) ; local Self AS CLASS TDsgnScroll := QSelf() AS CLASS TDsgnScroll

local rc := {::aRect[1],::aRect[2],::aRect[3],::aRect[4]}

if .F.
   return ::PaintContour( hDC )
endif

if ::lVertical
   ::PaintVScroll( hDC, .T., .F., .F., .T. )
else
   ::PaintHScroll( hDC, .T. ,.F., .F., .T. )
endif

if ::oWnd:oSelected <> nil .AND. (::oWnd:oSelected:nItemId == ::nItemId .OR. ::lSelected)
   ::DotsSelect( hDC )
endif

return nil







      static FUNCTION TDsgnScroll_ContextMenu( nRow, nCol ) ; local Self AS CLASS TDsgnScroll := QSelf() AS CLASS TDsgnScroll

local oMenu
local o := self

    MenuAddItem("Flat"         ,,o:lFlat         ,,{|oMenuItem|::lFlat          := !::lFlat         ,::Refresh()},,,,,,,.F.,,,.F. )
    MenuAddItem("lActive"      ,,o:lActive       ,,{|oMenuItem|::lActive        := !::lActive       ,::Refresh()},,,,,,,.F.,,,.F. )

   MenuAddItem()


return nil
