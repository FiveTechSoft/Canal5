#line 38 "\fwh\include\FiveWin.ch"
      static bError
#line 219 "hbclass.ch"
DECLARE HBClass  New( cName AS STRING, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS OBJECT  Instance() AS OBJECT  AddClsMethod( cName AS STRING, @MethodName(), nScope AS NUMERIC, n2 AS NUMERIC, n3 AS NUMERIC )  AddMultiClsData( cType AS STRING, uVal, nScope AS NUMERIC, aDatas AS ARRAY OF STRING )  AddMultiData( cType AS STRING, uVal, nScope AS NUMERIC, aDatas AS ARRAY OF STRING, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS STRING, @MethodName(), nScope AS NUMERIC )  AddInLine( cName AS STRING, bBlock AS CODEBLOCK, nScope AS NUMERIC )  AddVirtual( cName AS STRING )
#line 79 "\fwh\include\FiveWin.ch"
         EXTERNAL FW_GT











extern errorsys
#line 15 "source\dlgfind.prg"
_HB_CLASS TDlgFind ; function TDlgFind ( ... ) ; static s_oClass ; local nScope, oClass, oInstance ; if s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; begin sequence ; nScope := 1 ; ( ( nScope ) ) ; oClass := IIF(.F.,, HBClass():new( "TDlgFind" , iif( .T., { @TDialog() }, { @HBObject() } ), @TDlgFind() ) ) ;

   _HB_MEMBER { nFindMsgString } ; oClass:AddMultiClsData(,, nScope + iif( .F., 16, 0 ) + iif( .T., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nFindMsgString"}, .F. )

; _HB_MEMBER { bAction } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"bAction"}, .F. )

   _HB_MEMBER New( cText, bAction) AS CLASS TDlgFind; oClass:AddMethod( "New", @TDlgFind_New(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Command( nWParam, nLParam); oClass:AddMethod( "Command", @TDlgFind_Command(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CtlColor( hWndChild, hDCChild) ; oClass:AddVirtual( "CtlColor" )

   _HB_MEMBER HandleEvent( nMsg, nWParam, nLParam); oClass:AddMethod( "HandleEvent", @TDlgFind_HandleEvent(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; oInstance := oClass:Instance() ; if __ObjHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; end ; always ; __clsUnlockDef( @s_oClass, oClass ) ; end ; return oInstance ; end ; return s_oClass:Instance() AS CLASS TDlgFind ;



static FUNCTION TDlgFind_New( cText, oEdit, bAction ) ; local Self AS CLASS TDlgFind := QSelf() AS CLASS TDlgFind

   local nFindMsgString

   ::lModal    = .F.
   ::lCentered = .F.
   ::lHelpIcon = .T.
   ::bAction := bAction

   RegDialog( ::hWnd := FindText( cText, oEdit:hWnd, Self, @nFindMsgString ) )

   if ::nFindMsgString == nil
      ::nFindMsgString = nFindMsgString
   endif

   ::Link()

return Self



static FUNCTION TDlgFind_HandleEvent( nMsg, nWParam, nLParam ) ; local Self AS CLASS TDlgFind := QSelf() AS CLASS TDlgFind

   if nMsg == ::nFindMsgString
      MsgBeep()
   endif

return ::TDialog:HandleEvent( nMsg, nWParam, nLParam )



function DlgFindText( cText, oEdit, bAction )

   local oDlg := TDlgFind():New( cText, oEdit, bAction )

return oDlg


   static FUNCTION TDlgFind_Command( nWParam, nLParam ) ; local Self AS CLASS TDlgFind := QSelf() AS CLASS TDlgFind


   local nNotifyCode, nID, hWndCtl
   local cText





      nNotifyCode = nHiWord( nWParam )
      nID         = nLoWord( nWParam )
      hWndCtl     = nLParam


   do case
      case nNotifyCode == 0
           if nID == 1
              cText := GetWindowText( GetDlgItem( ::hWnd, 1152 ) )
              SetLastFind( cText )
              if ::bAction <> nil
                 eval( ::bAction, cText )
              endif
              ::SetFocus(GetDlgItem(::hWnd,1))
           else
              if nId == 2
                 ::End()
              endif
           endif
   endcase



return 0
