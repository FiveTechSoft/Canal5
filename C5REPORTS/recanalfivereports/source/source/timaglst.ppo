#line 38 "\fwh\include\FiveWin.ch"
      static bError
#line 219 "hbclass.ch"
DECLARE HBClass  New( cName AS STRING, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS OBJECT  Instance() AS OBJECT  AddClsMethod( cName AS STRING, @MethodName(), nScope AS NUMERIC, n2 AS NUMERIC, n3 AS NUMERIC )  AddMultiClsData( cType AS STRING, uVal, nScope AS NUMERIC, aDatas AS ARRAY OF STRING )  AddMultiData( cType AS STRING, uVal, nScope AS NUMERIC, aDatas AS ARRAY OF STRING, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS STRING, @MethodName(), nScope AS NUMERIC )  AddInLine( cName AS STRING, bBlock AS CODEBLOCK, nScope AS NUMERIC )  AddVirtual( cName AS STRING )
#line 79 "\fwh\include\FiveWin.ch"
         EXTERNAL FW_GT











extern errorsys
#line 7 "source\timaglst.prg"
_HB_CLASS TImageList ; function TImageList ( ... ) ; static s_oClass ; local nScope, oClass, oInstance ; if s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; begin sequence ; nScope := 1 ; ( ( nScope ) ) ; oClass := IIF(.F.,, HBClass():new( "TImageList" , iif( .F., { }, { @HBObject() } ), @TImageList() ) ) ;

; _HB_MEMBER { hImageList } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hImageList"}, .F. )
; _HB_MEMBER { aBitmaps } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aBitmaps"}, .F. )
; _HB_MEMBER { nSize } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nSize"}, .F. )
 ;; _HB_MEMBER { nHeight, nWidth } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nHeight", "nWidth"}, .F. )

   _HB_MEMBER New( nWidth, nHeight, cFileName); oClass:AddMethod( "New", @TImageList_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )




   _HB_MEMBER Add(); oClass:AddInline( "Add", {|Self, oBmpImage, oBmpMask | ( ( Self ) ), AAdd( ::aBitmaps, oBmpImage ), AAdd( ::aBitmaps, oBmpMask ), ILAdd( ::hImageList, If( oBmpImage <> nil, oBmpImage:hBitmap, 0 ), If( oBmpMask <> nil, oBmpMask:hBitmap, 0 ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddIcon( oIcon); oClass:AddMethod( "AddIcon", @TImageList_AddIcon(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )




   _HB_MEMBER AddMasked(); oClass:AddInline( "AddMasked", {|Self, oBmpImage, nClrMask | ( ( Self ) ), AAdd( ::aBitmaps, oBmpImage ), ILAddMasked( ::hImageList, If( oBmpImage <> nil, oBmpImage:hBitmap, 0 ), nClrMask ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER End(); oClass:AddMethod( "End", @TImageList_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SetBkColor(); oClass:AddInline( "SetBkColor", {|Self, nColor | ( ( Self ) ), ILSetBkColor( ::hImageList, nColor ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER Draw( hDC, nImage, nTop, nLeft, lDisable); oClass:AddMethod( "Draw", @TImageList_Draw(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; oInstance := oClass:Instance() ; if __ObjHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; end ; always ; __clsUnlockDef( @s_oClass, oClass ) ; end ; return oInstance ; end ; return s_oClass:Instance() AS CLASS TImageList ;



static FUNCTION TImageList_New( nWidth, nHeight, cFileName ) ; local Self AS CLASS TImageList := QSelf() AS CLASS TImageList

   If( nWidth == nil, nWidth := 16, ) ; If( nHeight == nil, nHeight := 16, );

   ::nWidth := nWidth
   ::nHeight := nHeight

   if !file( cFileName )
      ::hImageList = ILCreate( nWidth, nHeight )
   else
      ::hImageList := ReadImageList( cFileName, nWidth, 10, ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )
   endif
   ::aBitmaps   = {}

return Self



static FUNCTION TImageList_AddIcon( oIcon ) ; local Self AS CLASS TImageList := QSelf() AS CLASS TImageList

   local oIco

   if ValType( oIcon ) == "C"
      if File( "oIcon" )
         oIco := TIcon():New( ,,, oIcon, )
      else
         oIco := TIcon():New( ,, oIcon,, )
      endif
   else
      oIco = oIcon
   endif

return ILAddIcon( ::hImageList, oIco:hIcon )



static FUNCTION TImageList_End( ) ; local Self AS CLASS TImageList := QSelf() AS CLASS TImageList

   local n

   ILDestroy( ::hImageList )

   for n = 1 to Len( ::aBitmaps )
      ::aBitmaps[ n ]:End()
   next

   ::aBitmaps = {}

return nil



    static FUNCTION TImageList_Draw( hDC, nImage, nTop, nLeft, lDisable ) ; local Self AS CLASS TImageList := QSelf() AS CLASS TImageList


ImageList_Draw( ::hImageList, nImage, hDC, nLeft, nTop, 0 )

return nil









#pragma BEGINDUMP
#include <windows.h>
#include <hbapi.h>
#include <commctrl.h>


HB_FUNC( READIMAGELIST )
{

   hb_retnl( (long) ImageList_LoadImage(  NULL,
                                    hb_parc(1),
                                    hb_parni(2),
                                    hb_parni(3),
                          (COLORREF)hb_parnl(4),
                      IMAGE_BITMAP, LR_LOADFROMFILE | LR_CREATEDIBSECTION ) );

}


HB_FUNC( ILCREATE )
{                                                  // ILC_COLORDDB | ILC_MASK
   hb_retnl( ( LONG ) ImageList_Create( hb_parnl( 1 ), hb_parnl( 2 ),
           ILC_COLORDDB | ILC_MASK, 0, 50 ) );
}


HB_FUNC( IMAGELIST_DRAW )
{
   hb_retl( ImageList_Draw((HIMAGELIST) hb_parnl( 1 ), hb_parni(2)    ,
                           (HDC) hb_parnl(3), hb_parni(4), hb_parni(5),
                           (UINT) hb_parni(6)))                       ;

}

#pragma ENDDUMP
