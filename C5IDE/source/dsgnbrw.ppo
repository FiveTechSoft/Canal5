#line 38 "\fwh\include\fivewin.ch"
      static bError
#line 219 "hbclass.ch"
DECLARE HBClass  New( cName AS STRING, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS OBJECT  Instance() AS OBJECT  AddClsMethod( cName AS STRING, @MethodName(), nScope AS NUMERIC, n2 AS NUMERIC, n3 AS NUMERIC )  AddMultiClsData( cType AS STRING, uVal, nScope AS NUMERIC, aDatas AS ARRAY OF STRING )  AddMultiData( cType AS STRING, uVal, nScope AS NUMERIC, aDatas AS ARRAY OF STRING, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS STRING, @MethodName(), nScope AS NUMERIC )  AddInLine( cName AS STRING, bBlock AS CODEBLOCK, nScope AS NUMERIC )  AddVirtual( cName AS STRING )
#line 79 "\fwh\include\fivewin.ch"
         EXTERNAL FW_GT











extern errorsys
#line 12 "source\dsgnbrw.prg"
_HB_CLASS TDsgnBrowse ; function TDsgnBrowse ( ... ) ; static s_oClass ; local nScope, oClass, oInstance ; if s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; begin sequence ; nScope := 1 ; ( ( nScope ) ) ; oClass := IIF(.F.,, HBClass():new( "TDsgnBrowse" , iif( .T., { @TShape() }, { @HBObject() } ), @TDsgnBrowse() ) ) ;

; _HB_MEMBER { aProperties } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aProperties"}, .F. )


; _HB_MEMBER { lFlat } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lFlat"}, .F. )
; _HB_MEMBER { lVScroll } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lVScroll"}, .F. )
; _HB_MEMBER { lHScroll } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lHScroll"}, .F. )
; _HB_MEMBER { lActive } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lActive"}, .F. )
; _HB_MEMBER { nClrText } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nClrText"}, .F. )
; _HB_MEMBER { nClrPaneHdr } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nClrPaneHdr"}, .F. )
; _HB_MEMBER { nClrTextHdr } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nClrTextHdr"}, .F. )
; _HB_MEMBER { lModalFrame } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lModalFrame"}, .F. )
; _HB_MEMBER { cDbf } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cDbf"}, .F. )

      _HB_MEMBER New( nTop, nLeft, nBottom, nRight, oWnd) AS CLASS TDsgnBrowse; oClass:AddMethod( "New", @TDsgnBrowse_New(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER Paint( hDC); oClass:AddMethod( "Paint", @TDsgnBrowse_Paint(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER ContextMenu( nRow, nCol); oClass:AddMethod( "ContextMenu", @TDsgnBrowse_ContextMenu(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER nMinWidth( nVal); _HB_MEMBER _nMinWidth( nVal); oClass:AddMethod( "nMinWidth", @TDsgnBrowse_nMinWidth(), nScope + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) ) ; oClass:AddMethod( "_nMinWidth", @TDsgnBrowse_nMinWidth(), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER nMinHeight( nVal); _HB_MEMBER _nMinHeight( nVal); oClass:AddMethod( "nMinHeight", @TDsgnBrowse_nMinHeight(), nScope + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) ) ; oClass:AddMethod( "_nMinHeight", @TDsgnBrowse_nMinHeight(), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER Edit() ; oClass:AddVirtual( "Edit" )
      _HB_MEMBER SetProps( oList); oClass:AddMethod( "SetProps", @TDsgnBrowse_SetProps(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; oInstance := oClass:Instance() ; if __ObjHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; end ; always ; __clsUnlockDef( @s_oClass, oClass ) ; end ; return oInstance ; end ; return s_oClass:Instance() AS CLASS TDsgnBrowse ;


      static FUNCTION TDsgnBrowse_New( nTop, nLeft, nBottom, nRight, oWnd ) ; local Self AS CLASS TDsgnBrowse := QSelf() AS CLASS TDsgnBrowse


   if nTop <> nil .AND. ( nBottom-nTop < 10 .OR. nRight-nLeft < 10)
      nBottom := nTop + 90
      nRight  := nLeft + 81
   endif

   ::TShape:New( nTop, nLeft, nBottom, nRight, oWnd )

   ::nClrText      := 0
   ::nClrBorder    := 0
   ::nClrPane      := 16777215
   ::nClrPaneHdr   := ( 222 + ( 207 * 256 ) + ( 198 * 65536 ) )
   ::nClrTextHdr   := 0
   ::lActive       := .T.
   ::lVScroll      := .T.
   ::lHScroll      := .T.
   ::lBorder       := .T.
   ::lBold         := .F.
   ::lModalFrame   := .F.
   ::nMinWidth     := 90
   ::nMinHeight    := 81

   ::cCaption     := ""
   ::bContextMenu := {|nRow,nCol| ::ContextMenu( nRow, nCol ) }











  ::aPropertiesPPC := { "cCaption"      , "lBorder"       , "nID"           , "nTop"          , "nLeft"         , "nWidth"        , "nHeight"       , "nClrPane"      , "nClrText"      , "lVScroll"      , "lHScroll"      }



















   ::aProperties := { "aDotsActives"   , "aRect"          , "lActive"        , "lBorder"        , "lCanSize" , "lCanMove"       , "lEditable"      , "lHScroll"       , "lVScroll"       , "lVisible"       , "nClrBorder"     , "nClrPane"       , "nClrText"       , "xMaxHeight"     , "xMaxWidth"      , "xMinHeight"     , "xMinWidth"      }

  ::cObjName         := ::GetObjName()
  if oCbxComponentes() <> nil
     oCbxComponentes():Add( ::cObjName )
  endif



return self




  static FUNCTION TDsgnBrowse_Paint( hDC ) ; local Self AS CLASS TDsgnBrowse := QSelf() AS CLASS TDsgnBrowse

local rc := {::aRect[1],::aRect[2],::aRect[3],::aRect[4]}
local rc2
local rcText
local iMode
local nColor
local hOldFont
local nHItem
local nWItem
local nTop := 0
local nLeft := 0
local nBottom := 0
local nRight := 0
local hBmp, nWBmp
local lCabenV := .T.
local lCabenH := .T.
local n
local nCol   := 0
local nCount := 0
local lTheme
local hTheme
local lThemes := lTemas() .AND. !::oWnd:lPocketPc()  .AND. C5_IsAppThemed() .AND. C5_IsThemeActive()

    nColor := SetTextColor( hDC, ::nClrText )

    iMode := SetBkMode(hDC,1)

    if ::lBorder
       if lThemes
          hTheme := C5_OpenThemeData(::oWnd:hWnd, "LISTVIEW")
          C5_DrawThemeBackground( hTheme, hDC, 1,1, rc )
          C5_CloseThemeData()
       else
          FillSolidRect(hDC, rc, if(::lActive,::nClrPane,GetSysColor(15)), 0 )
       endif
    else
       FillSolidRect(hDC, rc, if(::lActive,::nClrPane,GetSysColor(15)))
    endif

    rcText := {rc[1],rc[2],rc[3],rc[4]}

    if ::lModalFrame
       rc := {::aRect[1],::aRect[2],::aRect[3],::aRect[4]}
       DrawEdge( hDC, rc, 0x0002, nOr(0x0001 , 0x0002 , 0x0004 , 0x0008) )
       rc[1]++; rc[2]++; rc[3]--; rc[4]--
       DrawEdge( hDC, rc, 0x0008, nOr(0x0001 , 0x0002 , 0x0004 , 0x0008) )
       rc[1]--; rc[2]--; rc[3]++; rc[4]++
    endif

   for n := 0 to 10

       nHItem := 15
       nWItem := ::nWidth

       nTop    := ::nTop  + ((n-1) * nHItem ) + 19
       nLeft   := ::nLeft + 1
       nRight  := nLeft   + nWItem
       nBottom := nTop    + nHItem

       if nBottom  > ::nBottom
          lCabenV := .F.
          Moveto( hDC, nLeft, nBottom - if( ::lHScroll,16,0) )
          Lineto( hDC, nRight - if( ::lVScroll,16,0), nBottom - if( ::lHScroll,16,0) )
          exit
       endif

       if nRight -20 > ::nRight
          lCabenH := .F.
       endif

       rc := { ::nTop+1, ::nLeft+1,::nTop+ 17,::nRight-1- if( !lCabenV,20,0) }

       if n == 0
          if ::oWnd:lPocketPc()

                rc := { ::nTop+1, ::nLeft+1,::nTop+ 17,::nLeft + 1 + 55 }
                DrawFrameControl( hDC, rc, 4, 0x0010  )
                rc := { ::nTop+2, ::nLeft+2,::nTop+ 15,::nLeft + 1 + 54 }
                FillSolidRect( hDC, rc, ::nClrPaneHdr )

                rc := { ::nTop+1, ::nLeft+1+1+54,::nTop+ 17,::nRight- if( !lCabenV,22,0) }
                DrawFrameControl(hDC, rc, 4, 0x0010  )
                rc := { ::nTop+2, ::nLeft+1+1+55,::nTop+ 15,::nRight- if( !lCabenV,22,0) }
                FillSolidRect( hDC, rc, ::nClrPaneHdr )

          else

             if lThemes
                hTheme := C5_OpenThemeData(::oWnd:hWnd, "HEADER")
                rc := { ::nTop+2, ::nLeft+2,::nTop+ nHItem,::nLeft + 2 + 55 }
                C5_DrawThemeBackground( hTheme, hDC, 2, 2, rc )
                rc := { ::nTop+2, ::nLeft+2+55+1 ,::nTop+nHItem,::nRight- if( !lCabenV,22,2) }
                C5_DrawThemeBackground( hTheme, hDC, 2, 2, rc )
                C5_CloseThemeData()
             else
                FillSolidRect( hDC, rc, GetSysColor(15) )

                rc := { ::nTop+1, ::nLeft+1,::nTop+ 17,::nLeft + 1 + 55 }
                DrawFrameControl(hDC, rc, 4, 0x0010  )

                rc := { ::nTop+1, ::nLeft+1+1+55,::nTop+ 17,::nRight- if( !lCabenV,20,0) }
                DrawFrameControl(hDC, rc, 4, 0x0010  )

             endif

          endif

          DrawText( hDC, "STATE", { ::nTop+1, ::nLeft+5,::nTop+ 17,::nLeft + 1 + 55 }, nOr( 0x00000004, 0x00000020 ) )
          DrawText( hDC, "ZIP", { ::nTop+1, ::nLeft+55+5,::nTop+ 17,::nRight      }, nOr( 0x00000004, 0x00000020 ) )
          loop

       endif

       iMode := SetBkMode( hDC, 1 )

       SetBkMode( hDC, iMode )

       if !lCabenV .OR. !lCabenH
          DeleteObject( hBmp )
          exit
       endif

       if n == 4
          nColor := SetTextColor( hDC, 16777215 )
          FillSolidRect( hDC, { nTop, nLeft, nTop + nHItem, nRight- if( ::lVScroll,16,0) }, 8388608 )
       endif


       DrawText( hDC, {"NJ","FL","TN","NC","OR","KS","UT","NV","IL","KY"}[n],  { nTop, nLeft+3, nTop + nHItem, nRight- if( ::lVScroll,16,0) }, nOr( 0x00000004, 0x00000020 ) )











       DrawText( hDC, {"43426-5384", "15211-0627", "68437-1691", "14203-9055", "39961-7346", "02449-8932", "45082-2681", "34093-6640", "78184-7519", "80515-8016"}[n],  { nTop, nLeft+56+3, nTop + nHItem, nRight- if( ::lVScroll,16,0) }, nOr( 0x00000004, 0x00000020 ) )
       if n == 4
          SetTextColor( hDC, nColor )
       endif


       FillSolidRect( hDC, { nBottom - if( ::lHScroll,16,0) + nHItem ,nLeft, nBottom - if( ::lHScroll,16,0) + nHItem+1 ,nRight - if( ::lVScroll,16,0)}, 12632256 )




       DeleteObject( hBmp )

   next
   rc := {::aRect[1],::aRect[2],::aRect[3],::aRect[4]}

   FillSolidRect( hDC, { rc[1],::nLeft+55, rc[3]- if( ::lHScroll,14,0), ::nLeft+55+1}, 12632256 )



   SetTextColor( hDC, nColor )






   if ::lVScroll
      ::PaintVScroll( hDC, .T.,::lHScroll, ::lHScroll  )
   endif

   if ::lHScroll
      ::PaintHScroll( hDC, .T. ,::lVScroll, ::lVScroll )
   endif


if ::oWnd:oSelected <> nil .AND. (::oWnd:oSelected:nItemId == ::nItemId .OR. ::lSelected)
   ::DotsSelect( hDC )
endif

return nil




      static FUNCTION TDsgnBrowse_ContextMenu( nRow, nCol ) ; local Self AS CLASS TDsgnBrowse := QSelf() AS CLASS TDsgnBrowse

local oMenu
local o := self


return nil


  static FUNCTION TDsgnBrowse_nMinWidth( nVal ) ; local Self AS CLASS TDsgnBrowse := QSelf() AS CLASS TDsgnBrowse


if pcount() > 0
   ::xMinWidth := nVal
endif

return if( ::lHScroll .OR. ::lVScroll, max( 22, ::xMinWidth ), ::xMinWidth )


  static FUNCTION TDsgnBrowse_nMinHeight( nVal ) ; local Self AS CLASS TDsgnBrowse := QSelf() AS CLASS TDsgnBrowse


if pcount() > 0
   ::xMinHeight := nVal
endif

return if( ::lVScroll .OR. ::lHScroll , max( 22, ::xMinHeight ), ::xMinHeight )




   static FUNCTION TDsgnBrowse_SetProps( oList ) ; local Self AS CLASS TDsgnBrowse := QSelf() AS CLASS TDsgnBrowse

local nGroup
local o := self

nGroup := oList:AddGroup( "Appearence" )




oList:AddItem( "cObjName","Name", ,nGroup )
oList:AddItem( "lActive","Active","L" ,nGroup )
oList:AddItem( "cDbf","Dbf", "B",nGroup,,,{|| cGetFile( "DBFs (*.dbf ) | *.dbf |", "Selecciona dbf" )} )
oList:AddItem( "lCanMove","Can move", "L",nGroup )
oList:AddItem( "lCanSize","Can size", "L",nGroup )
oList:AddItem( "lHScroll","Horizontal scrollbar", "L",nGroup )
oList:AddItem( "lVScroll","Vertical scrollbar", "L",nGroup )
oList:AddItem( "nClrText","Text Color", "B",nGroup,,,{|| ChooseColor( o:nClrText )} )
oList:AddItem( "nClrPane","Back Color", "B",nGroup,,,{|| ChooseColor( o:nClrPane )} )
oList:AddItem( "nClrTextHdr","Header Text Color", "B",nGroup,,,{|| ChooseColor( o:nClrTextHdr )} )
oList:AddItem( "nClrPaneHdr","Header Back Color", "B",nGroup,,,{|| ChooseColor( o:nClrPaneHdr )} )


nGroup := oList:AddGroup(  "Position" )

oList:AddItem( "nTop","Top", ,nGroup )
oList:AddItem( "nLeft","Left", ,nGroup )
oList:AddItem( "nWidth","Width", ,nGroup )
oList:AddItem( "nHeight","Height", ,nGroup )





return 0
