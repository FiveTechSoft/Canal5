#line 38 "\fwh\include\fivewin.ch"
      static bError
#line 219 "hbclass.ch"
DECLARE HBClass  New( cName AS STRING, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS OBJECT  Instance() AS OBJECT  AddClsMethod( cName AS STRING, @MethodName(), nScope AS NUMERIC, n2 AS NUMERIC, n3 AS NUMERIC )  AddMultiClsData( cType AS STRING, uVal, nScope AS NUMERIC, aDatas AS ARRAY OF STRING )  AddMultiData( cType AS STRING, uVal, nScope AS NUMERIC, aDatas AS ARRAY OF STRING, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS STRING, @MethodName(), nScope AS NUMERIC )  AddInLine( cName AS STRING, bBlock AS CODEBLOCK, nScope AS NUMERIC )  AddVirtual( cName AS STRING )
#line 79 "\fwh\include\fivewin.ch"
         EXTERNAL FW_GT











extern errorsys
#line 7 "source\dsgnpanel.prg"
_HB_CLASS TDsgnPanel ; function TDsgnPanel ( ... ) ; static s_oClass ; local nScope, oClass, oInstance ; if s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; begin sequence ; nScope := 1 ; ( ( nScope ) ) ; oClass := IIF(.F.,, HBClass():new( "TDsgnPanel" , iif( .T., { @TShape() }, { @HBObject() } ), @TDsgnPanel() ) ) ;

; _HB_MEMBER { aProperties } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aProperties"}, .F. )

; _HB_MEMBER { lActive } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lActive"}, .F. )
; _HB_MEMBER { aPrompts } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aPrompts"}, .F. )
; _HB_MEMBER { aSizes } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aSizes"}, .F. )
; _HB_MEMBER { nHTab } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nHTab"}, .F. )

      _HB_MEMBER New( nTop, nLeft, nBottom, nRight, oWnd) AS CLASS TDsgnPanel; oClass:AddMethod( "New", @TDsgnPanel_New(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER Paint( hDC); oClass:AddMethod( "Paint", @TDsgnPanel_Paint(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER ShapeOver( nRow, nCol); oClass:AddMethod( "ShapeOver", @TDsgnPanel_ShapeOver(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER IntersectRect( aRect); oClass:AddMethod( "IntersectRect", @TDsgnPanel_IntersectRect(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER AddPage(); oClass:AddMethod( "AddPage", @TDsgnPanel_AddPage(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER AddShape( oShape, nPage); oClass:AddMethod( "AddShape", @TDsgnPanel_AddShape(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER StorePos(); oClass:AddMethod( "StorePos", @TDsgnPanel_StorePos(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER DeleteChild( o); oClass:AddMethod( "DeleteChild", @TDsgnPanel_DeleteChild(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER GetContainer( aRect); oClass:AddMethod( "GetContainer", @TDsgnPanel_GetContainer(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER oMainPage(); oClass:AddInline( "oMainPage", {|Self | ( ( Self ) ), ::aPages[::nOption] }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER SetOption( nOption); oClass:AddMethod( "SetOption", @TDsgnPanel_SetOption(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER CheckSelecteds( aRect); oClass:AddMethod( "CheckSelecteds", @TDsgnPanel_CheckSelecteds(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER SetSize( nWidth, nHeight, lUndo); oClass:AddMethod( "SetSize", @TDsgnPanel_SetSize(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER Inspect( cDataName, oInspector); oClass:AddMethod( "Inspect", @TDsgnPanel_Inspect(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER GetObjNames(); oClass:AddMethod( "GetObjNames", @TDsgnPanel_GetObjNames(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER GetObjFromName( cName); oClass:AddMethod( "GetObjFromName", @TDsgnPanel_GetObjFromName(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER cSetFocus( coCtrlName); oClass:AddMethod( "cSetFocus", @TDsgnPanel_cSetFocus(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; oInstance := oClass:Instance() ; if __ObjHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; end ; always ; __clsUnlockDef( @s_oClass, oClass ) ; end ; return oInstance ; end ; return s_oClass:Instance() AS CLASS TDsgnPanel ;


      static FUNCTION TDsgnPanel_New( nTop, nLeft, nBottom, nRight, oWnd ) ; local Self AS CLASS TDsgnPanel := QSelf() AS CLASS TDsgnPanel

   local o := self

   if nTop <> nil .AND. ( nBottom-nTop < 10 .OR. nRight-nLeft < 10 )
      nBottom := nTop + 100
      nRight  := nLeft + 160
   endif

   ::TShape:New( nTop, nLeft, nBottom, nRight, oWnd )

   ::aDotsActives     := {1,1,1,1,1,1,1,1}
   ::aPages        := {}
   ::nOption       := 1
   ::lActive       := .T.
   ::lContainer    := .T.
   ::nClrPane      := nil
   ::oTop          := nil
   ::oLeft         := nil
   ::oBottom       := nil
   ::oRight        := nil
   ::oClient       := nil
  ::cObjName         := ::GetObjName()



















  ::aProperties :=  { "aDotsActives"   , "aRect"          , "aPages"         , "lActive"        , "lCanSize"       , "lCanMove"       , "lEditable"      , "lVisible"       , "nClrPane"       , "oBottom"        , "oClient"        , "oLeft"          , "oRight"         , "oTop"           , "nOption"        , "xMaxHeight"     , "xMaxWidth"      , "xMinHeight"     , "xMinWidth"      }
   ::AddPage()

  if oCbxComponentes() <> nil
     oCbxComponentes():Add( ::cObjName )
  endif

return self




  static FUNCTION TDsgnPanel_AddPage( ) ; local Self AS CLASS TDsgnPanel := QSelf() AS CLASS TDsgnPanel

local oPage

oPage := TDsgnPage():New()
oPage:oWnd := ::oWnd

aadd( ::aPages, oPage )

::oWnd:Refresh()

return nil


  static FUNCTION TDsgnPanel_AddShape( oShape, nPage ) ; local Self AS CLASS TDsgnPanel := QSelf() AS CLASS TDsgnPanel


if nPage == nil; nPage := ::nOption; endif

::aPages[nPage]:AddShape( oShape )

return nil






  static FUNCTION TDsgnPanel_Paint( hDC ) ; local Self AS CLASS TDsgnPanel := QSelf() AS CLASS TDsgnPanel

   local rc := {::aRect[1],::aRect[2],::aRect[3],::aRect[4]}
   local color, iMode
   local grisoscuro := ( 113 + ( 111 * 256 ) + ( 100 * 65536 ) )
   local gris       := ( 157 + ( 157 * 256 ) + ( 161 * 65536 ) )
   local grisclaro  := ( 241 + ( 239 * 256 ) + ( 226 * 65536 ) )
   local nTop    := rc[1]
   local nLeft   := rc[2]
   local nBottom := rc[3]
   local nRight  := rc[4]
   local hWhitePen, hGrisOscuro, hGris, hGrisClaro
   local hOldPen, hOldFont
   local n, n2, nLen, nLen2
   local nSizeItem := 0
   local nMode
   local hTheme
   local lThemes := lTemas() .AND. !::oWnd:lPocketPc  .AND. C5_IsAppThemed() .AND. C5_IsThemeActive()
   local aOptions
   local hDCMem, hOldBmp, hBmpMem
   local aRect := ::GetClientRect()
   local oPage
   local nClrPane := ::nClrPane
   local nColor

   ::SetSize( rc[4]-rc[2],rc[3]-rc[1],.F.)

   if nClrPane == nil
     if ::oWnd:lPocketPc()
        nClrPane := 16777215
     else
        nClrPane := GetSysColor(15)
     endif
   endif

   hDCMem      := CreateCompatibleDC( ::oWnd:hDC )
   hBmpMem     := CreateCompatibleBitmap( ::oWnd:hDC, aRect[4], aRect[3] )
   hOldBmp     := SelectObject( hDCMem, hBmpMem )

   rc := {::aRect[1],::aRect[2],::aRect[3],::aRect[4]}

   FillSolidRect( hDCMem, rc, nClrPane )

   for each oPage in ::aPages
       oPage:aRect := rc
       oPage:oWnd := ::oWnd
       oPage:Paint( hDCMem )
   next

   rc[3]--;rc[4]--

   nColor := SetBkColor( hDCMem, ( 224 + ( 223 * 256 ) + ( 227 * 65536 ) ) )
   Box( hDCMem, rc, ( 205 + ( 203 * 256 ) + ( 211 * 65536 ) ), 2 )
   SetBkColor( hDCMem, nColor )


   StretchBlt( hDC,    aRect[2], aRect[1], aRect[4]-aRect[2], aRect[3]-aRect[1], hDCMem, aRect[2], aRect[1], aRect[4]-aRect[2], aRect[3]-aRect[1], 13369376 )

   SelectObject( hDCMem, hOldBmp )
   DeleteObject( hBmpMem )
   DeleteDC( hDCMem )

   DeleteObject( hGris )
   DeleteObject( hGrisClaro )
   DeleteObject( hGrisOscuro )


   if ::oWnd:oSelected <> nil .AND. (::oWnd:oSelected:nItemId == ::nItemId .OR. ::lSelected)
      ::DotsSelect( hDC )
   endif

return nil



  static FUNCTION TDsgnPanel_IntersectRect( aRect ) ; local Self AS CLASS TDsgnPanel := QSelf() AS CLASS TDsgnPanel

local lIntersect := .F.
local aClientRect := ::GetClientRect()

if EsMayor( aClientRect, aRect )
   return .F.
endif

if IntersectRect( aRect, ::aRect )
   lIntersect := .T.
endif

return lInterSect


      static FUNCTION TDsgnPanel_ShapeOver( nRow, nCol ) ; local Self AS CLASS TDsgnPanel := QSelf() AS CLASS TDsgnPanel

 local oShape
 local rc := {::aRect[1],::aRect[2],::aRect[3],::aRect[4]}

 if PtInRect( nRow, nCol, {rc[1]-5,rc[2]-5,rc[3]+5,rc[4]+5} )
    rc := {::aRect[1]+5,::aRect[2]+5,::aRect[3]-5,::aRect[4]-5}
    if !PtInRect( nRow, nCol, rc )
       return self
    else
       return ::oMainPage:ShapeOver( nRow, nCol )
    endif
 endif

 return nil



   static FUNCTION TDsgnPanel_SetOption( nOption ) ; local Self AS CLASS TDsgnPanel := QSelf() AS CLASS TDsgnPanel

local nOldOption := ::nOption
local oShape

if nOption <= 0 .OR. nOption > len( ::aPages )
   return nil
endif

::nOption := nOption
::oMainPage:lVisible := .T.
if ::nOption <> nOldOption
   ::aPages[nOldOption]:lVisible := .F.
endif












return nil



      static FUNCTION TDsgnPanel_StorePos( ) ; local Self AS CLASS TDsgnPanel := QSelf() AS CLASS TDsgnPanel

local oShape, oPage

::TShape:StorePos()

for each oPage in ::aPages
    for each oShape in oPage:aShapes
        oShape:StorePos()
    next
next

return nil



  static FUNCTION TDsgnPanel_DeleteChild( o ) ; local Self AS CLASS TDsgnPanel := QSelf() AS CLASS TDsgnPanel

local nPages, nShapes, n, n2
local oPage

for each oPage in ::aPages
    nShapes := len( oPage:aShapes )
    for n := 1 to nShapes
        if oPage:aShapes[n] == o
           adel( oPage:aShapes, n )
           asize( oPage:aShapes, len( oPage:aShapes )-1 )
           return 0
        endif
    next
next


return nil


  static FUNCTION TDsgnPanel_GetContainer( aRect ) ; local Self AS CLASS TDsgnPanel := QSelf() AS CLASS TDsgnPanel


return ::oMainPage:GetContainer( aRect )



  static FUNCTION TDsgnPanel_CheckSelecteds( aRect ) ; local Self AS CLASS TDsgnPanel := QSelf() AS CLASS TDsgnPanel

local oShape
local lHay := .F.
local n, nLen

nLen := len( ::oMainPage:aShapes )

for n := 1 to nLen

    oShape := ::oMainPage:aShapes[n]

    if oShape:IntersectRect( aRect )
       if !oShape:lCanMove
          loop
       endif
       lHay := .T.
       aadd( ::oWnd:aSelecteds, oShape )
       oShape:StorePos()
       oShape:lSelected := .T.

    else
       oShape:lSelected := .F.
    endif

next

if !lHay
   ::oWnd:aSelecteds := {}
else
   ::oWnd:Refresh()
endif

return lHay



   static FUNCTION TDsgnPanel_SetSize( nWidth, nHeight, lUndo ) ; local Self AS CLASS TDsgnPanel := QSelf() AS CLASS TDsgnPanel

local lChange := .T.
local aClient
local nT, nL, nH, nW
local oTop, oLeft, oBottom, oRight, oClient

if nWidth  == nil; nWidth  := ::nWidth ; endif
if nHeight == nil; nHeight := ::nHeight; endif
if lUndo   == nil; lUndo   := .F.      ; endif

if nWidth < ::nMinWidth
   nWidth := ::nMinWidth
   lChange := .F.
endif

if nHeight < ::nMinHeight
   nHeight := ::nMinHeight
   lChange := .F.
endif

if !lUndo .AND. lChange
   ::oWnd:AddUndo( self, "SetSize", ::nWidth, ::nHeight, .T. )
endif

::aRect[4] := ::aRect[2] + nWidth
::aRect[3] := ::aRect[1] + nHeight



aClient := ::GetClientRect()


if ::oTop <> nil
   oTop := ::GetObjFromName(::oTop)
   if oTop <> nil
      nT := aClient[1]
      nL := aClient[2]
      nW := aClient[4]-aClient[2]
      nH := oTop:nHeight
      oTop:aRect := {nT, nL, nT+nH, nL+nW}
      aClient[1] += nH
   endif
endif

if ::oBottom <> nil
   oBottom := ::GetObjFromName(::oBottom)
   if oBottom <> nil
      nT := aClient[3]-oBottom:nHeight
      nL := aClient[2]
      nW := aClient[4]
      nH := oBottom:nHeight
      aClient[3] -= nH
      oBottom:aRect := {nT, nL, nT+nH, nL+nW}
   endif
endif

if ::oLeft  <> nil
   oLeft := ::GetObjFromName(::oLeft)
   if oLeft <> nil
      nT := aClient[1]
      nL := aClient[2]
      nW := oLeft:nWidth
      nH := aClient[3]-aClient[1]
      aClient[2] += nW
      oLeft:aRect := {nT, nL, nT+nH, nL+nW}
   endif
endif

if ::oRight  <> nil
   oRight := ::GetObjFromName(::oRight)
   if oRight <> nil
      nT := aClient[1]
      nL := aClient[4]- oRight:nWidth
      nW := oRight:nWidth
      nH := aClient[3]-aClient[1]
      aClient[4] -= nW
      oRight:aRect := {nT, nL, nT+nH, nL+nW}
   endif
endif

if ::oClient <> nil
   oClient := ::GetObjFromName(::oClient)
   if oClient <> nil
      nT := aClient[1]
      nL := aClient[2]
      nW := aClient[4]-aClient[2]
      nH := aClient[3]-aClient[1]
      oClient:aRect := {nT, nL, nT+nH, nL+nW}
   endif
endif

if lUndo
   ::oWnd:Refresh()
endif



  static FUNCTION TDsgnPanel_Inspect( cDataName, oInspector ) ; local Self AS CLASS TDsgnPanel := QSelf() AS CLASS TDsgnPanel


local o := self
local n
local uVal
local hDC, aFonts
local aPoint := {0,0}
local aCtrls := {}

   do case
      case cDataName == "oTop" .OR. cDataName == "oLeft" .OR. cDataName == "oBottom" .OR. cDataName == "oRight" .OR. cDataName == "oClient"
           if !empty( oInspector:aRectBtn )
              aPoint := {oInspector:aRectBtn[3],oInspector:aRectBtn[4]}
              aPoint := ClientToScreen( oInspector:hWnd, aPoint )
           endif




           return {|cDataName| oSend( self,  "_" + cDataName,  xSelControl( aPoint[1], aPoint[2]-155, "", o:GetObjNames(), o ) ), o:SetSize(), o:Refresh(),oInspector:Refresh() }

   endcase

return ::TShape:Inspect( cDataName, oInspector )



  static FUNCTION TDsgnPanel_GetObjNames( ) ; local Self AS CLASS TDsgnPanel := QSelf() AS CLASS TDsgnPanel

local n
local aCtrls := {""}

  for n := 1 to len( ::oMainPage:aShapes )
      aadd( aCtrls, ::oMainPage:aShapes[n]:GetObjName() )
  next

return  aCtrls



  static FUNCTION TDsgnPanel_GetObjFromName( cName ) ; local Self AS CLASS TDsgnPanel := QSelf() AS CLASS TDsgnPanel

local n, c

for n := 1 to len( ::oMainPage:aShapes )
    c := ::oMainPage:aShapes[n]:GetObjName()
    if c == cName
       return ::oMainPage:aShapes[n]
    endif
next

return nil



   static FUNCTION TDsgnPanel_cSetFocus( coCtrlName ) ; local Self AS CLASS TDsgnPanel := QSelf() AS CLASS TDsgnPanel

local n

  for n := 1 to len( ::oMainPage:aShapes ) -1
      if coCtrlName == ::oMainPage:aShapes[n]:GetObjName()
         ::oMainPage:aShapes[n]:SetFocus(.F.)
      endif
  next
  ::oWnd:Refresh()

return nil










_HB_CLASS TDsgnPagePanel ; function TDsgnPagePanel ( ... ) ; static s_oClass ; local nScope, oClass, oInstance ; if s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; begin sequence ; nScope := 1 ; ( ( nScope ) ) ; oClass := IIF(.F.,, HBClass():new( "TDsgnPagePanel" , iif( .T., { @TShape() }, { @HBObject() } ), @TDsgnPagePanel() ) ) ;

; _HB_MEMBER { nSize } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nSize"}, .F. )
; _HB_MEMBER { aCoords } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aCoords"}, .F. )
; _HB_MEMBER { lVisible } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lVisible"}, .F. )

      _HB_MEMBER New( nTop, nLeft, nBottom, nRight, oWnd) AS CLASS TDsgnPagePanel; oClass:AddMethod( "New", @TDsgnPagePanel_New(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER Paint( hDC); oClass:AddMethod( "Paint", @TDsgnPagePanel_Paint(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER GetContainer( aRect); oClass:AddMethod( "GetContainer", @TDsgnPagePanel_GetContainer(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER ShapeOver( nRow, nCol); oClass:AddMethod( "ShapeOver", @TDsgnPagePanel_ShapeOver(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER AddShape(); oClass:AddInline( "AddShape", {|Self, oShape | ( ( Self ) ), aadd( ::aShapes, oShape ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; oInstance := oClass:Instance() ; if __ObjHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; end ; always ; __clsUnlockDef( @s_oClass, oClass ) ; end ; return oInstance ; end ; return s_oClass:Instance() AS CLASS TDsgnPagePanel ;


  static FUNCTION TDsgnPagePanel_New( ) ; local Self AS CLASS TDsgnPagePanel := QSelf() AS CLASS TDsgnPagePanel


   ::TShape:New()

   ::aCoords := {0,0,0,0}
   ::lCanSize := .F.
   ::lCanMove       := .F.
   ::lContainer     := .T.









   ::aProperties := { "aShapes"        , "nSize"          , "aCoords"        , "lVisible"       , "lCanMove"       , "lCanSize" , "aDotsActives"   , "aRect"          , "lEditable"      }

return self



   static FUNCTION TDsgnPagePanel_Paint( hDC ) ; local Self AS CLASS TDsgnPagePanel := QSelf() AS CLASS TDsgnPagePanel

local oShape

if !::lVisible
   return 0
endif

for each oShape in ::aShapes
    oShape:oWnd := ::oWnd
    oShape:Paint( hDC )
next

return nil



  static FUNCTION TDsgnPagePanel_GetContainer( aRect ) ; local Self AS CLASS TDsgnPagePanel := QSelf() AS CLASS TDsgnPagePanel


local oShape, oContainer

for each oShape in ::aShapes
    oContainer := oShape:GetContainer( aRect )
    if oContainer <> nil
       return oContainer
    endif
next

if EsMayor( ::aRect, aRect )
   oContainer := self
endif


return oContainer


  static FUNCTION TDsgnPagePanel_ShapeOver( nRow, nCol ) ; local Self AS CLASS TDsgnPagePanel := QSelf() AS CLASS TDsgnPagePanel

local oShape, oOver

for each oShape in ::aShapes
    oOver := oShape:ShapeOver( nRow, nCol )
    if oOver <> nil
       return oOver
    endif
next

return nil



function outp( c )
return OutPutDebugString( cValToChar(c) )





return nil
