#line 38 "\fwh\include\fivewin.ch"
      static bError
#line 219 "hbclass.ch"
DECLARE HBClass  New( cName AS STRING, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS OBJECT  Instance() AS OBJECT  AddClsMethod( cName AS STRING, @MethodName(), nScope AS NUMERIC, n2 AS NUMERIC, n3 AS NUMERIC )  AddMultiClsData( cType AS STRING, uVal, nScope AS NUMERIC, aDatas AS ARRAY OF STRING )  AddMultiData( cType AS STRING, uVal, nScope AS NUMERIC, aDatas AS ARRAY OF STRING, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS STRING, @MethodName(), nScope AS NUMERIC )  AddInLine( cName AS STRING, bBlock AS CODEBLOCK, nScope AS NUMERIC )  AddVirtual( cName AS STRING )
#line 79 "\fwh\include\fivewin.ch"
         EXTERNAL FW_GT











extern errorsys
#line 12 "source\dsgnrpt.prg"
function DsgnPrt( nType )

local oWnd, oDsgn, oBar, oShape
local oPanel
local oBrush
local lVScroll := .F.
local lHScroll := .F.
local cTitle   := "Diseñador de formularios"
local oSplit
local nWidth
local nHeight
local oImageList
local oDirList
local aClient := GetClientRect( Aplicacion():oWnd:hWnd )
local nH, nW
local hDC

 nH := 297.4
 nW := 210.0

 hDC := CreateDC( "DISPLAY", 0, 0, 0 )
 nWidth := ( 1024 / GetDeviceCaps( hDC, 4 ) ) * nW
 nHeight := ( 768  / GetDeviceCaps( hDC, 6 ) ) * nH
 DeleteDC( hDC )


oBrush := TBrush():New( Upper("NULL"),,,,, )











oWnd := TMdiChild2():New(   0, 200, aClient[4]-200, aClient[3]-Aplicacion():oWnd:oBar:nHeight, cTitle,,, Aplicacion():oWnd,, lVScroll, 0, 16777215,,, .F., lHScroll,,,!.F.,!.F.,!.F.,!.F.,)

    oDsgn := TDsgnEditorRpt():New( 6, 6, nWidth, nHeight, oWnd )
    oDsgn:lBorder := .T.
    oDsgn:nType = nType

    oWnd:bCopy  := {|| if( oDsgn:oSelected <> nil, oDsgn:oSelected:Copy(),) }
    oWnd:bPaste := {|| oDsgn:Paste( 40, 10, oDsgn ) }
    oWnd:bUndo  := {|| oDsgn:Undo() }
    oWnd:bSelectAll  := {|| oDsgn:SelectAll() }
    oWnd:bDelete  := {|| oDsgn:KeyDown( 46 ) }







       oWnd:oHScroll := TScrollBar():WinNew( 12, 500,, (!.T.), oWnd, {||       oDsgn:GoLeft()}, {||     oDsgn:GoRight()}, {||   oDsgn:PageLeft()}, {|| oDsgn:PageRight()}, {|nPos| oDsgn:HThumbPos( nPos ) },,,, .F.,, )
          oWnd:oHScroll:SetPos( 6 )








       oWnd:oVScroll := TScrollBar():WinNew( 12, 500,, (!.F.) .OR. .T., oWnd, {||       oDsgn:GoUp()}, {||     oDsgn:GoDown()}, {||   oDsgn:PageUp()}, {|| oDsgn:PageDown()}, {|nPos| oDsgn:VThumbPos( nPos ) },,,, .F.,, )
          oWnd:oVScroll:SetPos( 6 )

    WndFold()



oWnd:Activate(, oWnd:bLClicked, oWnd:bRClicked, oWnd:bMoved, oWnd:bResized, oWnd:bPainted, oWnd:bKeyDown, oWnd:bInit := { | Self | ( oWnd:Move( 0, 200, aClient[4]-200, aClient[3]-Aplicacion():oWnd:oBar:nHeight,.T.)) },,,,,,,,,,, oWnd:bLButtonUp )


return oDsgn


_HB_CLASS TDsgnEditorRpt ; function TDsgnEditorRpt ( ... ) ; static s_oClass ; local nScope, oClass, oInstance ; if s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; begin sequence ; nScope := 1 ; ( ( nScope ) ) ; oClass := IIF(.F.,, HBClass():new( "TDsgnEditorRpt" , iif( .T., { @TDsgnEditor() }, { @HBObject() } ), @TDsgnEditorRpt() ) ) ;

      _HB_MEMBER { AS LOGICAL lRegistered } ; oClass:AddMultiClsData( "LOGICAL",, nScope + iif( .F., 16, 0 ) + iif( .T., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lRegistered"}, .F. )

; _HB_MEMBER { nHHeader } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nHHeader"}, .F. )
; _HB_MEMBER { nHBody } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nHBody"}, .F. )
; _HB_MEMBER { nHFoot } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nHFoot"}, .F. )

      _HB_MEMBER New( nTop, nLeft, nWidth, nHeight, oWnd) AS CLASS TDsgnEditorRpt; oClass:AddMethod( "New", @TDsgnEditorRpt_New(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

      _HB_MEMBER Paint(); oClass:AddMethod( "Paint", @TDsgnEditorRpt_Paint(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; oInstance := oClass:Instance() ; if __ObjHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; end ; always ; __clsUnlockDef( @s_oClass, oClass ) ; end ; return oInstance ; end ; return s_oClass:Instance() AS CLASS TDsgnEditorRpt ;



      static FUNCTION TDsgnEditorRpt_New( nTop, nLeft, nWidth, nHeight, oWnd ) ; local Self AS CLASS TDsgnEditorRpt := QSelf() AS CLASS TDsgnEditorRpt

   local nCuarto := nHeight / 4

   ::TDsgnEditor:New( nTop, nLeft, nWidth, nHeight, oWnd )

   ::nHHeader := nCuarto
   ::nHBody   := nCuarto*2
   ::nHFoot   := nCuarto

return self




  static FUNCTION TDsgnEditorRpt_Paint( ) ; local Self AS CLASS TDsgnEditorRpt := QSelf() AS CLASS TDsgnEditorRpt

   local hDCMem
   local hBmpMem
   local aRect := GetClientRect(::hWnd)
   local hOldBmp
   local nLen
   local n
   local oFigura
   local hRegion, hRegion2
   local rc := {aRect[1],aRect[2],aRect[3],aRect[4]}
   local hOldFont, oFont
   local hPen := CreatePen( 2, 1, 0 )
   local hOldPen

   hDCMem  := CreateCompatibleDC( ::hDC )
   hBmpMem := CreateCompatibleBitmap( ::hDC, aRect[4], aRect[3] )
   hOldBmp := SelectObject( hDCMem, hBmpMem )

   FillSolidRect( hDCMem, aRect, ( 240 + ( 240 * 256 ) + ( 250 * 65536 ) ),0)

   nLen := len( ::aShapes )

   if nLen > 0
      ::aShapes[nLen]:Paint( hDCMem )
   endif

   hRegion := CreateRectRgn( rc[2],  rc[1], rc[4], rc[3] )
   SelectClipRgn( hDCMem, hRegion )
   DeleteObject( hRegion )

   hOldPen := SelectObject( hDCMem, hPen )
   Moveto( hDCMem,        0, ::nHHeader ) ;                     Lineto( hDCMem, ::nWidth, ::nHHeader )
   Moveto( hDCMem,        0, ::nHHeader+::nHBody ) ;            Lineto( hDCMem, ::nWidth, ::nHHeader+::nHBody )
   Moveto( hDCMem,        0, ::nHHeader+::nHBody+::nHFoot ) ;   Lineto( hDCMem, ::nWidth, ::nHHeader+::nHBody+::nHFoot )
   SelectObject( hDCMem, hOldPen )
   DeleteObject( hPen )

   for n := nLen-1 to 1 step -1
       oFigura := ::aShapes[n]
       if oFigura:lVisibleInForm
             oFigura:Paint( hDCMem )
       endif
   next

   if !empty( ::aRectSel )
      DrawFocusRect( hDCMem, ::aRectSel[1], ::aRectSel[2], ::aRectSel[3], ::aRectSel[4])
   endif

   SelectClipRgn( hDCMem, nil )

BitBlt( ::hDC, 0, 0, aRect[4], aRect[3], hDCMem, 0, 0, 13369376 )

SelectObject( hDCMem, hOldBmp )
DeleteObject( hBmpMem )
DeleteDC( hDCMem )


return 0
