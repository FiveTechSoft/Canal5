#line 38 "\fwh\include\fivewin.ch"
      static bError
#line 219 "hbclass.ch"
DECLARE HBClass  New( cName AS STRING, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS OBJECT  Instance() AS OBJECT  AddClsMethod( cName AS STRING, @MethodName(), nScope AS NUMERIC, n2 AS NUMERIC, n3 AS NUMERIC )  AddMultiClsData( cType AS STRING, uVal, nScope AS NUMERIC, aDatas AS ARRAY OF STRING )  AddMultiData( cType AS STRING, uVal, nScope AS NUMERIC, aDatas AS ARRAY OF STRING, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS STRING, @MethodName(), nScope AS NUMERIC )  AddInLine( cName AS STRING, bBlock AS CODEBLOCK, nScope AS NUMERIC )  AddVirtual( cName AS STRING )
#line 79 "\fwh\include\fivewin.ch"
         EXTERNAL FW_GT











extern errorsys
#line 15 "source\ctrltbar.prg"
function ToolBar( nTop, nLeft, nWidth, nHeight, oPage )
local oWnd, oDlg
local oToolBar
local oBtnFld
local oSlide1
local nVar1 := 10


        oBtnFld  := TBtnFolder():New( nTop, nLeft, nTop+nHeight, nLeft+nWidth, oPage )



        oToolBar := TCtrlToolBar():New( 0, 0, 1, 1, oBtnFld, "Controles", "toolbar\image3.bmp" )
        aadd( oBtnFld:aFolders, oToolBar )

        oToolBar:AddItem( "Seleccionar"  ,   0, {||Aplicacion():nState := 0   } )
        oToolBar:AddItem( "Boton"        ,   2, {||Aplicacion():nState := 1      } )
        oToolBar:AddItem( "Get"          ,   5, {||Aplicacion():nState := 3      } )
        oToolBar:AddItem( "Say"          ,   1, {||Aplicacion():nState := 8      } )
        oToolBar:AddItem( "ListBox"      ,   4, {||Aplicacion():nState := 5  } )
        oToolBar:AddItem( "ComboBox"     ,  12, {||Aplicacion():nState := 4    } )
        oToolBar:AddItem( "GroupBox"     ,   8, {||Aplicacion():nState := 6 } )
        oToolBar:AddItem( "RadioBox"     ,   6, {||Aplicacion():nState := 7    } )
        oToolBar:AddItem( "CheckBox"     ,   7, {||Aplicacion():nState := 2     } )
        oToolBar:AddItem( "Imagen"       ,   9, {||Aplicacion():nState := 9  } )
        oToolBar:AddItem( "Menu"         ,   3, {||Aplicacion():nState := 25     } )
        oToolBar:AddItem( "ListView"     ,  13, {||Aplicacion():nState := 15 } )
        oToolBar:AddItem( "TreeView"     ,  14, {||Aplicacion():nState := 16     } )
        oToolBar:AddItem( "TrackControl" ,  25, {||Aplicacion():nState := 12 } )
        oToolBar:AddItem( "Meter"        ,  26, {||Aplicacion():nState := 14 } )

        oToolBar:AddItem( "User Control" ,  43, {||Aplicacion():nState := 28     } )
        oToolBar:AddItem( "Icon"         ,  44, {||Aplicacion():nState := 29     } )
        oToolBar:AddItem( "ButtonBar"    ,  30, {||Aplicacion():nState := 24      } )
        oToolBar:AddItem( "BtnBmp"       ,  45, {||Aplicacion():nState := 27   } )
        oToolBar:AddItem( "Browse"       ,  46, {||Aplicacion():nState := 26   } )
        oToolBar:AddItem( "Folder"       ,  15, {||Aplicacion():nState := 17  } )
        oToolBar:AddItem( "Panel"        ,  10, {||Aplicacion():nState := 30    } )
        oToolBar:AddItem( "VistaMenu"    ,  10, {||Aplicacion():nState := 31 } )

        SetScrollRange( oToolBar:hWnd, 1, 1, len(oToolBar:aItems ), .T. )





        SetScrollRange( oToolBar:hWnd, 1, 1, len(oToolBar:aItems ), .T. )

        oToolBar := TCtrlToolBar():New( 0, 0, 1, 1, oBtnFld, "Alinear", "toolbar\image4.bmp" )
        aadd( oBtnFld:aFolders, oToolBar )
        oToolBar:AddItem( "Selección"                , 0 )
        oToolBar:AddItem( "Izquierda"                , 1, {|| if( Aplicacion():oDFocus <> nil, Aplicacion():oDFocus:Align( , 8),)} )
        oToolBar:AddItem( "Derecha"                  , 2, {|| if( Aplicacion():oDFocus <> nil, Aplicacion():oDFocus:Align( , 4),)} )
        oToolBar:AddItem( "Arriba"                   , 3, {|| if( Aplicacion():oDFocus <> nil, Aplicacion():oDFocus:Align( , 2),)} )
        oToolBar:AddItem( "Abajo"                    , 4, {|| if( Aplicacion():oDFocus <> nil, Aplicacion():oDFocus:Align( , 6),)} )
        oToolBar:AddItem( "Centrar Horizontal"       , 5, {|| if( Aplicacion():oDFocus <> nil, Aplicacion():oDFocus:Align( , 9),)} )
        oToolBar:AddItem( "Centrar Vertical"         , 6, {|| if( Aplicacion():oDFocus <> nil, Aplicacion():oDFocus:Align( ,10),)} )
        oToolBar:AddItem( "Repartir horizontal"      , 7, {|| if( Aplicacion():oDFocus <> nil, Aplicacion():oDFocus:Align( ,20),)} )
        oToolBar:AddItem( "Repartir vertical"        , 8, {|| if( Aplicacion():oDFocus <> nil, Aplicacion():oDFocus:Align( ,21),)} )
        oToolBar:AddItem( "Mismo ancho"              , 9 )
        oToolBar:AddItem( "Mismo alto"               ,10 )
        oToolBar:AddItem( "Mismo tamaño"             ,11 )
        oToolBar:AddItem( "Centrado horizontal"      ,12 )
        oToolBar:AddItem( "Centrado vertical"        ,13 )

        oToolBar := TCtrlToolBar():New( 0, 0, 1, 1, oBtnFld, "Imágenes", "toolbar\image4.bmp" )
        aadd( oBtnFld:aFolders, oToolBar )

        oToolBar:AddItem( "Abrir"                   , 20, {|| Aplicacion():Abrir(.F.,.F.,.T.)} )
        oToolBar:AddItem( "Aumentar"                , 14, {|| if( Aplicacion():oImgFocus <> nil, Aplicacion():oImgFocus:Zoom(),)} )
        oToolBar:AddItem( "Disminuir"               , 15, {|| if( Aplicacion():oImgFocus <> nil, Aplicacion():oImgFocus:UnZoom(),)} )
        oToolBar:AddItem( "Rotar 90º"               , 16, {|| if( Aplicacion():oImgFocus <> nil, Aplicacion():oImgFocus:Rotar(90),)} )


        oToolBar:AddItem( "Flip Horizontal"         , 17, {|| if( Aplicacion():oImgFocus <> nil, Aplicacion():oImgFocus:FlipH(),)} )
        oToolBar:AddItem( "Flip Vertical"           , 18, {|| if( Aplicacion():oImgFocus <> nil, Aplicacion():oImgFocus:FlipV(),)} )
        oToolBar:AddItem( "Salvar"                  , 19, {|| if( Aplicacion():oImgFocus <> nil, Aplicacion():oImgFocus:Save(),)} )
        oToolBar:AddItem( "Salvar como JPG"         , 19, {|| if( Aplicacion():oImgFocus <> nil, Aplicacion():oImgFocus:SaveAsJPG(),)} )
        oToolBar:AddItem( space(16)+"...  BMP"  , 19, {|| if( Aplicacion():oImgFocus <> nil, Aplicacion():oImgFocus:SaveAsBMP(),)} )
        oToolBar:AddItem( space(16)+"...  TIF"  , 19, {|| if( Aplicacion():oImgFocus <> nil, Aplicacion():oImgFocus:SaveAsTIF(),)} )
        oToolBar:AddItem( space(16)+"...  PNG"  , 19, {|| if( Aplicacion():oImgFocus <> nil, Aplicacion():oImgFocus:SaveAsPng(),)} )
        oToolBar:AddItem( space(16)+"...  GIF"  , 19, {|| if( Aplicacion():oImgFocus <> nil, Aplicacion():oImgFocus:SaveAsGif(),)} )
        oToolBar:AddItem( space(16)+"...  ICO"  , 19, {|| if( Aplicacion():oImgFocus <> nil, Aplicacion():oImgFocus:SaveAsICO(),)} )


        oToolBar := TCtrlToolBar():New( 0, 0, 1, 1, oBtnFld, "Buscar", "toolbar\image4.bmp", {||ShowWndFind()}, {|self| FindInFiles( self )} )
        aadd( oBtnFld:aFolders, oToolBar )


        oBtnFld:SetOption( 1 )


return oBtnFld


_HB_CLASS TBtnFolder ; function TBtnFolder ( ... ) ; static s_oClass ; local nScope, oClass, oInstance ; if s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; begin sequence ; nScope := 1 ; ( ( nScope ) ) ; oClass := IIF(.F.,, HBClass():new( "TBtnFolder" , iif( .T., { @TControl() }, { @HBObject() } ), @TBtnFolder() ) ) ;

      _HB_MEMBER { AS LOGICAL lRegistered } ; oClass:AddMultiClsData( "LOGICAL",, nScope + iif( .F., 16, 0 ) + iif( .T., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lRegistered"}, .F. )

; _HB_MEMBER { aFolders } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aFolders"}, .F. )
; _HB_MEMBER { nOption } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nOption"}, .F. )
; _HB_MEMBER { nFirst } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nFirst"}, .F. )
; _HB_MEMBER { aClient } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aClient"}, .F. )
; _HB_MEMBER { nHItem } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nHItem"}, .F. )

      _HB_MEMBER New( nTop, nLeft, nBottom, nRight, oWnd) AS CLASS TBtnFolder; oClass:AddMethod( "New", @TBtnFolder_New(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

      _HB_MEMBER LButtonDown( nRow, nCol, nFlags); oClass:AddMethod( "LButtonDown", @TBtnFolder_LButtonDown(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



      _HB_MEMBER Display(); oClass:AddInline( "Display", {|Self | ( ( Self ) ), ::BeginPaint(), ::Paint(), ::EndPaint(),0 }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER Paint(); oClass:AddMethod( "Paint", @TBtnFolder_Paint(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER GetClientRect(); oClass:AddMethod( "GetClientRect", @TBtnFolder_GetClientRect(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER SetOption( nOption); oClass:AddMethod( "SetOption", @TBtnFolder_SetOption(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER ReSize( nSizeType, nWidth, nHeight); oClass:AddMethod( "ReSize", @TBtnFolder_ReSize(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )





oClass:Create() ; ; oInstance := oClass:Instance() ; if __ObjHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; end ; always ; __clsUnlockDef( @s_oClass, oClass ) ; end ; return oInstance ; end ; return s_oClass:Instance() AS CLASS TBtnFolder ;


   static FUNCTION TBtnFolder_New( nTop, nLeft, nBottom, nRight, oWnd ) ; local Self AS CLASS TBtnFolder := QSelf() AS CLASS TBtnFolder


   ::nTop      := nTop
   ::nLeft     := nLeft
   ::nBottom   := nBottom
   ::nRight    := nRight
   ::oWnd      := oWnd
   ::aFolders  := {}
   ::aClient   := {0,0,0,0}
   ::nOption   := 1
   ::nHItem    := 22

   ::nStyle    := nOR( 1073741824, 268435456, 65536 )
   ::nId       := ::GetNewId()

   ::lCaptured := .F.

   ::nClrText := 0
   ::nClrPane := 16777215

   ::oBrush := TBrush():New( Upper("NULL"),,,,, )

   ::Register( nOR( 1, 2 ) )

   if ! Empty( oWnd:hWnd )
      ::Create()
      ::lVisible = .T.
      oWnd:AddControl( Self )
   else
      oWnd:DefControl( Self )
      ::lVisible  = .F.
   endif

return Self


  static FUNCTION TBtnFolder_LButtonDown( nRow, nCol, nFlags ) ; local Self AS CLASS TBtnFolder := QSelf() AS CLASS TBtnFolder

local n
local nLen := len( ::aFolders )

for n := 1 to nLen
    if PtInRect( nRow, nCol, ::aFolders[n]:aRect )
       ::SetOption( n )
       ::Refresh()
       exit
    endif
next

return 0



  static FUNCTION TBtnFolder_ReSize( nSizeType, nWidth, nHeight ) ; local Self AS CLASS TBtnFolder := QSelf() AS CLASS TBtnFolder

local aC := GetClientRect( ::hWnd )

::SetOption( ::nOption )

return ::TControl:ReSize( nSizeType, nWidth, nHeight )



  static FUNCTION TBtnFolder_Paint( ) ; local Self AS CLASS TBtnFolder := QSelf() AS CLASS TBtnFolder

local n, nLen
local nCount  := 0
local nTop    := 0
local nBottom := 0
local nLeft   := 5
local nHeight := 0
local hDCMem, hBmp, hOldBmp
local aRect := GetClientRect(::hWnd)
local rc
local nMode
local hOldFont


ExcludeClipRect( ::hDC, ::aClient[2], ::aClient[1], ::aClient[4], ::aClient[3] )

hBmp   := CreateCompatibleBitmap( ::hDC, aRect[4], aRect[3] )
hDCMem := CreateCompatibleDC( ::hDC )

hOldBmp := SelectObject( hDCMem, hBmp )

FillSolidRect( hDCMem, aRect, ::nClrPane )
nMode := SetBkMode( hDCMem, 1 )

nLen := len( ::aFolders )

hOldFont := SelectObject( hDCMem, GetStockObject( 17 ) )

for n := 1 to ::nOption
    nTop := (::nHItem * (n-1) ) + nHeight
    rc := { nTop+1, 1, nTop + ::nHItem-1, ::aClient[4]-1}
    DrawFrameControl( hDCMem, rc, 4, nOr(0x0010, 0x4000 ))
    rc[2] += 15
    DrawText( hDCMem, ::aFolders[n]:cCaption, rc, nOr( 0x00000020,  0x00000004 ) )
next

nBottom := nTop + ::nHItem + (::aClient[3]-::aClient[1])

if ::nOption < nLen
   nCount := 0
   for n := ::nOption + 1 to nLen
       nTop := nBottom  + (::nHItem * nCount)
       rc := { nTop+1, 1, nTop + ::nHItem-1, ::aClient[4]-1}
       DrawFrameControl( hDCMem, rc, 4, nOr(0x0010, 0x4000 ))
    rc[2] += 15
       DrawText( hDCMem, ::aFolders[n]:cCaption, rc, nOr( 0x00000020, 0x00000004 ) )
       nCount ++
   next
endif

SetBkMode( hDCMem, nMode )
SelectObject( hDCMem, hOldFont )

BitBlt( ::hDC, 0, 0, aRect[4], aRect[3], hDCMem, 0, 0, 13369376 )

SelectObject( hDCMem, hOldBmp )
DeleteObject( hBmp )
DeleteDC( hDCMem )

return 0



  static FUNCTION TBtnFolder_GetClientRect( ) ; local Self AS CLASS TBtnFolder := QSelf() AS CLASS TBtnFolder

local nLen := len( ::aFolders )
local n
local nTop, nBottom
local nCount := 0

for n := 1 to ::nOption
    nTop := (::nHItem * (n-1) )
    ::aFolders[n]:aRect := { nTop, 0, nTop + ::nHItem, ::nWidth }
next

::aClient[1] := nTop + ::nHItem
::aClient[2] := 0
::aClient[3] := ::nHeight - (::nHItem * (nLen - ::nOption) )
::aClient[4] := ::nWidth

if ::nOption < nLen
   nCount := 0
   for n := ::nOption+1 to nLen
       nTop := ::aClient[3] + (::nHItem * nCount)
       ::aFolders[n]:aRect := { nTop, 0, nTop + ::nHItem, ::nWidth }
       nCount ++
   next
endif



return ::aClient


  static FUNCTION TBtnFolder_SetOption( nOption ) ; local Self AS CLASS TBtnFolder := QSelf() AS CLASS TBtnFolder

local n
local nOld := ::nOption
local hWnd

for n := 1 to len( ::aFolders )
    if n <> nOption
       ::aFolders[n]:Hide()
       hWnd := GetWindow( ::aFolders[n]:hWnd, 5 )
       if hWnd <> 0
          ShowWindow( hWnd, 0 )
       endif
    endif
next

::nOption := nOption
hWnd := GetWindow( ::aFolders[::nOption]:hWnd, 5 )
if hWnd <> 0
   ShowWindow( hWnd, 8 )
endif

if ::aFolders[::nOption]:bAction <> nil
   eval( ::aFolders[::nOption]:bAction )
endif

::GetClientRect()

::aFolders[::nOption]:Move( ::aClient[1],::aClient[2],::aClient[4]-::aClient[2],::aClient[3]-::aClient[1],.T.)
::aFolders[::nOption]:Show()

return nil




_HB_CLASS TCtrlToolBar ; function TCtrlToolBar ( ... ) ; static s_oClass ; local nScope, oClass, oInstance ; if s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; begin sequence ; nScope := 1 ; ( ( nScope ) ) ; oClass := IIF(.F.,, HBClass():new( "TCtrlToolBar" , iif( .T., { @TControl() }, { @HBObject() } ), @TCtrlToolBar() ) ) ;

      _HB_MEMBER { AS LOGICAL lRegistered } ; oClass:AddMultiClsData( "LOGICAL",, nScope + iif( .F., 16, 0 ) + iif( .T., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lRegistered"}, .F. )

; _HB_MEMBER { cCaption } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cCaption"}, .F. )
; _HB_MEMBER { oImageList } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oImageList"}, .F. )
; _HB_MEMBER { aItems } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aItems"}, .F. )
; _HB_MEMBER { aRect } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aRect"}, .F. )
; _HB_MEMBER { bAction } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"bAction"}, .F. )
; _HB_MEMBER { nOption } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nOption"}, .F. )
; _HB_MEMBER { nFirst } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nFirst"}, .F. )
; _HB_MEMBER { nHItem } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nHItem"}, .F. )
; _HB_MEMBER { lDown } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lDown"}, .F. )
; _HB_MEMBER { nOver } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nOver"}, .F. )


      _HB_MEMBER New( nTop, nLeft, nBottom, nRight, oWnd, cCaption, cBmpFile, bAction, bPage) AS CLASS TCtrlToolBar; oClass:AddMethod( "New", @TCtrlToolBar_New(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER AddItem( cCaption, nImage, bAction); oClass:AddMethod( "AddItem", @TCtrlToolBar_AddItem(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

      _HB_MEMBER Destroy(); oClass:AddInline( "Destroy", {|Self | ( ( Self ) ), ::oImageList:End(), ::TControl:Destroy() }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

      _HB_MEMBER LButtonDown( nRow, nCol, nFlags); oClass:AddMethod( "LButtonDown", @TCtrlToolBar_LButtonDown(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER MouseMove( nRow, nCol, nFlags); oClass:AddMethod( "MouseMove", @TCtrlToolBar_MouseMove(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER LButtonUp( nRow, nCol, nFlags); oClass:AddMethod( "LButtonUp", @TCtrlToolBar_LButtonUp(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

      _HB_MEMBER Display(); oClass:AddInline( "Display", {|Self | ( ( Self ) ), ::BeginPaint(), ::Paint(), ::EndPaint(),0 }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER Paint(); oClass:AddMethod( "Paint", @TCtrlToolBar_Paint(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

      _HB_MEMBER VScroll( nWParam, nLParam); oClass:AddMethod( "VScroll", @TCtrlToolBar_VScroll(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER MouseWheel( nKey, nDelta, nXPos, nYPos); oClass:AddMethod( "MouseWheel", @TCtrlToolBar_MouseWheel(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER KeyDown( nKey, nKeyFlags); oClass:AddMethod( "KeyDown", @TCtrlToolBar_KeyDown(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; oInstance := oClass:Instance() ; if __ObjHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; end ; always ; __clsUnlockDef( @s_oClass, oClass ) ; end ; return oInstance ; end ; return s_oClass:Instance() AS CLASS TCtrlToolBar ;


   static FUNCTION TCtrlToolBar_New( nTop, nLeft, nBottom, nRight, oWnd, cCaption, cBmpFile, bAction, bPage ) ; local Self AS CLASS TCtrlToolBar := QSelf() AS CLASS TCtrlToolBar


   If( cCaption == nil, cCaption := "", ) ;

   ::nTop      := nTop
   ::nLeft     := nLeft
   ::nBottom   := nBottom
   ::nRight    := nRight
   ::oWnd      := oWnd
   ::aItems    := {}
   ::cCaption  := cCaption
   ::oImageList  := TImageList():New(16,16,cBmpFile)
   ::aRect       := {0,0,0,0}
   ::lDown := .F.
   ::nOver     := 0
   ::nOption   := 1
   ::nFirst    := 1
   ::nHItem    := 22
   ::bAction   := bAction

   ::nStyle    := nOR(   1073741824, 268435456, 65536, 2097152 )
   ::nId       := ::GetNewId()

   ::lCaptured := .F.

   ::nClrText := 0
   ::nClrPane := 16777215

   ::oBrush := TBrush():New( Upper("NULL"),,,,, )

   ::Register( nOR( 1, 2 ) )

   if ! Empty( oWnd:hWnd )
      ::Create()
      ::lVisible = .T.
      oWnd:AddControl( Self )
   else
      oWnd:DefControl( Self )
      ::lVisible  = .F.
   endif

   ::oVScroll := TScrollBar():WinNew(,,, (!.F.) .OR. .T., Self,,,,,,,,, .F.,, )

   ::oVScroll:SetRange( 0, 0 )

   if bPage <> nil
      eval( bPage, self )
   endif


return Self



   static FUNCTION TCtrlToolBar_AddItem( cCaption, nImage, bAction ) ; local Self AS CLASS TCtrlToolBar := QSelf() AS CLASS TCtrlToolBar

local oItem

oItem := TItemToolBar():New( cCaption, nImage, bAction, self )

aadd( ::aItems, oItem )

::oVScroll:SetRange( 1, len( ::aItems ) )

return oItem




  static FUNCTION TCtrlToolBar_Paint( ) ; local Self AS CLASS TCtrlToolBar := QSelf() AS CLASS TCtrlToolBar

local n, nLen
local nCount := 0
local nTop   := 0
local nLeft  := 5
local hDCMem, hBmp, hOldBmp
local aRect := GetClientRect(::hWnd)

nLen := len( ::aItems )

if nLen == 0
   return 0
endif

if ::nHItem * nLen < aRect[3]
   ::oVScroll:SetRange( 0, 0 )
else
   ::oVScroll:SetRange( 1, nLen )
endif

hBmp    := CreateCompatibleBitmap( ::hDC, aRect[4], aRect[3] )
hDCMem  := CreateCompatibleDC( ::hDC )
hOldBmp := SelectObject( hDCMem, hBmp )

FillSolidRect( hDCMem, aRect, ::nClrPane )

for n := ::nFirst to nLen
    nTop := ::nHItem * nCount
    ::aItems[n]:Paint( hDCMem, nTop, nLeft,, n == ::nOption, ::nOver <> 0 .AND. !::lDown .AND. ::nOver == n)
    nCount++
next


BitBlt( ::hDC, 0, 0, aRect[4], aRect[3], hDCMem, 0, 0, 13369376 )

SelectObject( hDCMem, hOldBmp )
DeleteObject( hBmp )
DeleteDC( hDCMem )

return 0


  static FUNCTION TCtrlToolBar_LButtonDown( nRow, nCol, nFlags ) ; local Self AS CLASS TCtrlToolBar := QSelf() AS CLASS TCtrlToolBar

local nItem := int( nRow / ::nHItem )
local nLen := len( ::aItems )

if nLen == 0
   return 0
endif

nItem := ::nFirst + nItem

SetFocus(::hWnd)

::lDown := .T.

if nItem <= nLen
   ::nOption := nItem
   if ::aItems[::nOption]:bAction <> nil
      eval( ::aItems[::nOption]:bAction )
   endif
   ::Refresh()

endif

return 0


  static FUNCTION TCtrlToolBar_LButtonUp( nRow, nCol, nFlags ) ; local Self AS CLASS TCtrlToolBar := QSelf() AS CLASS TCtrlToolBar

::lDown := .F.

return 0




   static FUNCTION TCtrlToolBar_MouseMove( nRow, nCol, nFlags ) ; local Self AS CLASS TCtrlToolBar := QSelf() AS CLASS TCtrlToolBar

local nItem := int( nRow / ::nHItem )
local nLen := len( ::aItems )
nItem := ::nFirst + nItem

if nLen == 0
   return 0
endif

CursorHand()

if nItem <= len( ::aItems )
   ::nOver := nItem
   ::Refresh()
endif

return 0



  static FUNCTION TCtrlToolBar_MouseWheel( nKey, nDelta, nXPos, nYPos ) ; local Self AS CLASS TCtrlToolBar := QSelf() AS CLASS TCtrlToolBar

local nLen := len( ::aItems )
if nLen == 0
   return 0
endif


  if nDelta > 0
     ::KeyDown( 38 )
  else
     ::KeyDown( 40 )
  endif

return nil

return 0


   static FUNCTION TCtrlToolBar_KeyDown( nKey, nKeyFlags ) ; local Self AS CLASS TCtrlToolBar := QSelf() AS CLASS TCtrlToolBar

local aRect := GetClientRect(::hWnd)
local nLines := int( aRect[3]/::nHItem)
local nLen := len( ::aItems )
if nLen == 0
   return 0
endif


do case
   case nKey == 38
       ::nOption := max( 1, ::nOption-1)
       if ::nOption < ::nFirst
          ::nFirst--
       endif
       ::Refresh()
       ::oVScroll:SetPos( ::nOption )

   case nKey == 40
       ::nOption := min( len(::aItems), ::nOption+1)
       if ::nOption >= ::nFirst + nLines
          ::nFirst++
       endif
       ::Refresh()
       ::oVScroll:SetPos( ::nOption )

   case nKey == 36
       ::nOption := 1
       ::nFirst := 1
       ::Refresh()
       ::oVScroll:SetPos( 1 )

   case nKey == 35
       ::nFirst := len(::aItems)-nLines+1
       ::nOption := len(::aItems)
       ::oVScroll:GoBottom()
       ::Refresh()


endcase


return 0


  static FUNCTION TCtrlToolBar_VScroll( nWParam, nLParam ) ; local Self AS CLASS TCtrlToolBar := QSelf() AS CLASS TCtrlToolBar

local aRect := GetClientRect(::hWnd)
local nLines := int( aRect[3]/::nHItem)




      local nScrollCode := nLoWord( nWParam )


   local nPos := nHiWord( nWParam )

   local nLen := len( ::aItems )
   if nLen == 0
      return 0
   endif

   SetFocus(::hWnd)

   do case
      case nScrollCode == 0
           ::nFirst := max( 1, ::nFirst-1)
           ::oVScroll:PageUp()
           ::Refresh()
           return 0

      case nScrollCode == 1
           ::nFirst := min( len(::aItems), ::nFirst+1)
           ::oVScroll:PageDown()
           ::Refresh()
           return 0

      case nScrollCode == 2
           ::nFirst := max( 1, ::nFirst- int( aRect[3]/::nHItem) )
           ::oVScroll:PageUp()
           ::Refresh()
           return 0

      case nScrollCode == 3
           ::oVScroll:PageDown()
           ::nFirst := min( len(::aItems), ::nFirst+ int( aRect[3]/::nHItem) )
           ::Refresh()
           return 0


      case nScrollCode == 6
           ::nFirst := 1
           ::oVScroll:GoTop()
           ::Refresh()

      case nScrollCode == 7
           ::nFirst := len(::aItems)-nLines
           ::nOption := len(::aItems)
           ::oVScroll:GoBottom()
           ::Refresh()

       case nScrollCode == 4

           ::nFirst := nPos
           ::oVScroll:SetPos( nPos )
           ::Refresh( .F. )
           ::oVScroll:ThumbPos( nPos )
           return 0

       case nScrollCode == 5

           nPos := GetScrollInfoPos( ::hWnd, 1 )
           ::nFirst := nPos
           ::Refresh( .F. )
           return 0

      otherwise
           return nil
   endcase

   ::oVScroll:SetPos( ::nOption )

return 0




_HB_CLASS TItemToolBar ; function TItemToolBar ( ... ) ; static s_oClass ; local nScope, oClass, oInstance ; if s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; begin sequence ; nScope := 1 ; ( ( nScope ) ) ; oClass := IIF(.F.,, HBClass():new( "TItemToolBar" , iif( .F., { }, { @HBObject() } ), @TItemToolBar() ) ) ;

; _HB_MEMBER { cCaption } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cCaption"}, .F. )
; _HB_MEMBER { nImage } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nImage"}, .F. )
; _HB_MEMBER { bAction } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"bAction"}, .F. )
; _HB_MEMBER { oWnd } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oWnd"}, .F. )
; _HB_MEMBER { oPage } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oPage"}, .F. )

      _HB_MEMBER New( cCaption, nImage, bAction, oWnd) AS CLASS TItemToolBar; oClass:AddMethod( "New", @TItemToolBar_New(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER Paint( hDC, nTop, nLeft, lDisable, lSelected, lOver); oClass:AddMethod( "Paint", @TItemToolBar_Paint(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER PaintContour( hDC, nTop, nLeft, nBottom, nRight, nColor); oClass:AddMethod( "PaintContour", @TItemToolBar_PaintContour(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; oInstance := oClass:Instance() ; if __ObjHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; end ; always ; __clsUnlockDef( @s_oClass, oClass ) ; end ; return oInstance ; end ; return s_oClass:Instance() AS CLASS TItemToolBar ;


  static FUNCTION TItemToolBar_New( cCaption, nImage, bAction, oWnd ) ; local Self AS CLASS TItemToolBar := QSelf() AS CLASS TItemToolBar


  ::cCaption := cCaption
  ::nImage   := nImage
  ::bAction  := bAction
  ::oWnd     := oWnd

return self




  static FUNCTION TItemToolBar_Paint( hDC, nTop, nLeft, lDisable, lSelected, lOver ) ; local Self AS CLASS TItemToolBar := QSelf() AS CLASS TItemToolBar


local hOldFont := SelectObject( hDC, GetStockObject( 17 ) )
local nColor
local aRect := GetClientRect(::oWnd:hWnd)

if lDisable  == nil; lDisable  := .F.; endif
if lSelected == nil; lSelected := .F.; endif
if lOver     == nil; lOver     := .F.; endif

if lSelected
   FillSolidRect( hDC, {nTop, 0, nTop + ::oWnd:nHItem, aRect[4] }, ( 255 + ( 239 * 256 ) + ( 187 * 65536 ) ) )
   ::PaintContour( hDC, nTop, 0, nTop + ::oWnd:nHItem, aRect[4], ( 229 + ( 195 * 256 ) + ( 101 * 65536 ) ) )

else
   if lOver
      ::PaintContour( hDC, nTop, 0, nTop + ::oWnd:nHItem, aRect[4], ( 229 + ( 195 * 256 ) + ( 101 * 65536 ) ) )

   endif
endif

::oWnd:oImageList:Draw( hDC, ::nImage, nTop + ::oWnd:nHItem / 2 - ::oWnd:oImageList:nHeight/2   , nLeft )

nLeft += ::oWnd:oImageList:nWidth + 10

SetBkMode( hDC, 1 )

DrawText( hDC, ::cCaption, {nTop, nLeft, nTop + ::oWnd:nHItem, aRect[4] }, nOR( 0x00000020, 0x00000004 ) )

SetBkMode( hDC, 0 )

SelectObject( hDC, hOldFont )

if nColor <> nil
   SetTextColor( hDC, nColor )
endif

return 0



  static FUNCTION TItemToolBar_PaintContour( hDC, nTop, nLeft, nBottom, nRight, nColor ) ; local Self AS CLASS TItemToolBar := QSelf() AS CLASS TItemToolBar

local hPen := ExtCreatePen( 1, nColor )
local hOldPen := SelectObject( hDC, hPen )


Moveto( hDC, nLeft, nTop )
Lineto( hDC, nRight, nTop )
Lineto( hDC, nRight, nBottom )
Lineto( hDC, nLeft, nBottom )
Lineto( hDC, nLeft, nTop )

SelectObject( hDC, hOldPen )
DeleteObject( hPen )


return nil
