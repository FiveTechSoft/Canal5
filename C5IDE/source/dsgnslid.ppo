#line 38 "\fwh\include\fivewin.ch"
      static bError
#line 219 "hbclass.ch"
DECLARE HBClass  New( cName AS STRING, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS OBJECT  Instance() AS OBJECT  AddClsMethod( cName AS STRING, @MethodName(), nScope AS NUMERIC, n2 AS NUMERIC, n3 AS NUMERIC )  AddMultiClsData( cType AS STRING, uVal, nScope AS NUMERIC, aDatas AS ARRAY OF STRING )  AddMultiData( cType AS STRING, uVal, nScope AS NUMERIC, aDatas AS ARRAY OF STRING, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS STRING, @MethodName(), nScope AS NUMERIC )  AddInLine( cName AS STRING, bBlock AS CODEBLOCK, nScope AS NUMERIC )  AddVirtual( cName AS STRING )
#line 79 "\fwh\include\fivewin.ch"
         EXTERNAL FW_GT











extern errorsys
#line 7 "source\dsgnslid.prg"
_HB_CLASS TDsgnSlider ; function TDsgnSlider ( ... ) ; static s_oClass ; local nScope, oClass, oInstance ; if s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; begin sequence ; nScope := 1 ; ( ( nScope ) ) ; oClass := IIF(.F.,, HBClass():new( "TDsgnSlider" , iif( .T., { @TShape() }, { @HBObject() } ), @TDsgnSlider() ) ) ;

; _HB_MEMBER { lActive } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lActive"}, .F. )
; _HB_MEMBER { lTicks } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lTicks"}, .F. )
; _HB_MEMBER { lVertical } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lVertical"}, .F. )
; _HB_MEMBER { nAlign } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nAlign"}, .F. )
; _HB_MEMBER { nBtn } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nBtn"}, .F. )
; _HB_MEMBER { nClrBar } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nClrBar"}, .F. )
; _HB_MEMBER { nMax } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nMax"}, .F. )
; _HB_MEMBER { nMin } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nMin"}, .F. )
; _HB_MEMBER { nTicks } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nTicks"}, .F. )
; _HB_MEMBER { nTipo } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nTipo"}, .F. )
; _HB_MEMBER { nVal } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nVal"}, .F. )

      _HB_MEMBER New( nTop, nLeft, nBottom, nRight, oWnd) AS CLASS TDsgnSlider; oClass:AddMethod( "New", @TDsgnSlider_New(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER Paint( hDC); oClass:AddMethod( "Paint", @TDsgnSlider_Paint(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER ContextMenu( nRow, nCol); oClass:AddMethod( "ContextMenu", @TDsgnSlider_ContextMenu(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER PaintClassicArrow( hDC, nLeft, nTop, blanco, gris0, gris1, gris2); oClass:AddMethod( "PaintClassicArrow", @TDsgnSlider_PaintClassicArrow(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; oInstance := oClass:Instance() ; if __ObjHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; end ; always ; __clsUnlockDef( @s_oClass, oClass ) ; end ; return oInstance ; end ; return s_oClass:Instance() AS CLASS TDsgnSlider ;


      static FUNCTION TDsgnSlider_New( nTop, nLeft, nBottom, nRight, oWnd ) ; local Self AS CLASS TDsgnSlider := QSelf() AS CLASS TDsgnSlider


   if nTop <> nil .AND. (nBottom-nTop < 10 .OR. nRight-nLeft < 10)
      nBottom := nTop + 24
      nRight  := nLeft + 150
   endif


   ::TShape:New( nTop, nLeft, nBottom, nRight, oWnd )
  ::cObjName         := ::GetObjName()

   ::lActive      := .T.
   ::lBorder      := .F.
   ::lTicks       := .T.
   ::lVertical    := .F.
   ::nAlign       := nOr(0x00000020,0x00000004,0x00000001)
   ::nBtn         := 0
   ::nClrBar      := ( 0 + ( 0 * 256 ) + ( 140 * 65536 ) )
   ::nClrBorder   := 0
   ::nClrPane     := GetSysColor( 15)

   ::nMax         := 10
   ::nMin         := 0
   ::nTicks       := 11
   ::nTipo        := 1
   ::nVal         := 7

   ::cCaption     := "botón"
   ::bContextMenu := {|nRow,nCol| ::ContextMenu( nRow, nCol ) }
























   ::aProperties := { "aDotsActives"   , "aRect"          , "lActive"        , "lCanSize" , "lCanMove"       , "lTicks"         , "lVertical"      , "lVertical"      , "lVisible"       , "nAlign"         , "nBtn"           , "nClrBar"        , "nClrPane"       , "nClrText"       , "nMax"           , "nMin"           , "nTicks"         , "nTipo"          , "nVal"           , "xMaxHeight"     , "xMaxWidth"      , "xMinHeight"     , "xMinWidth"      }

  if oCbxComponentes() <> nil
     oCbxComponentes():Add( ::cObjName )
  endif


return self




  static FUNCTION TDsgnSlider_Paint( hDC ) ; local Self AS CLASS TDsgnSlider := QSelf() AS CLASS TDsgnSlider

    local rc    := { ::aRect[1], ::aRect[2], ::aRect[3], ::aRect[4] }
    local rc2   := { ::aRect[1], ::aRect[2], ::aRect[3], ::aRect[4] }
    local blanco := CreatePen( 0, 1, ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) ))
    local gris0  := CreatePen( 0, 1, ( 241 + ( 239 * 256 ) + ( 226 * 65536 ) ))
    local gris1  := CreatePen( 0, 1, ( 157 + ( 157 * 256 ) + ( 161 * 65536 ) ))
    local gris2  := CreatePen( 0, 1, ( 113 + ( 111 * 256 ) + ( 110 * 65536 ) ))
    local rcText
    local hOldPen
    local i
    local nTick0, nTick1
    local nLine
    local nBtn
    local nHW
    local nLeft, nTop
    local hTheme
    local hPenTick := nil
    local nProp

    if lTemas() .AND. !::oWnd:lPocketPc()  .AND. C5_IsAppThemed() .AND. C5_IsThemeActive()

       hTheme := C5_OpenThemeData(::oWnd:hWnd, "TRACKBAR")


       if hTheme <> nil

          nProp := ::nVal / ( ::nMax - ::nMin )

          if ::lVertical
             C5_DrawThemeBackground( hTheme, hDC, 10,1 , rc )

             rc    := { ::aRect[1]+9, ::aRect[2]+20, ::aRect[3]-9, ::aRect[2]+24 }
             if ::nBtn == 2
                rc[2] :=  ::nLeft + 11
                rc[4] :=  ::nLeft + 15
             endif
             C5_DrawThemeBackground( hTheme, hDC, 2, 1, rc )

             rc    := { ::aRect[1], ::aRect[2], ::aRect[3], ::aRect[4] }
             rc[1] := rc[1] + ((rc[3]-rc[1])*(1-nProp))
             rc[3] := rc[1] + 11
             rc[2] := rc[2] + 11
             rc[4] := rc[2] + 22
             do case
                case ::nBtn == 0
                     C5_DrawThemeBackground( hTheme, hDC, 6, 1, rc )
                case ::nBtn == 1
                     C5_DrawThemeBackground( hTheme, hDC, 7, 1, rc )
                case ::nBtn == 2
                     rc[2] := ::nLeft + 3
                     rc[4] := ::nLeft + 25
                     C5_DrawThemeBackground( hTheme, hDC, 8, 1, rc )
             endcase

          else
             C5_DrawThemeBackground( hTheme, hDC, 9,1 , rc )

             rc    := { ::aRect[1]+20, ::aRect[2]+9, ::aRect[1]+24, ::aRect[4]-9 }
             if ::nBtn == 2
                rc[1] :=  ::nTop  + 11
                rc[3] :=  ::nTop  + 15
             endif
             C5_DrawThemeBackground( hTheme, hDC, 1, 1, rc )

             rc    := { ::aRect[1], ::aRect[2], ::aRect[3], ::aRect[4] }
             rc[2] := rc[2] + ((rc[4]-rc[2])*(1-nProp))
             rc[4] := rc[2] + 11
             rc[1] := rc[1] + 11
             rc[3] := rc[1] + 22
             do case
                case ::nBtn == 0
                     C5_DrawThemeBackground( hTheme, hDC, 3, 1, rc )
                case ::nBtn == 1
                     C5_DrawThemeBackground( hTheme, hDC, 5, 1, rc )
                case ::nBtn == 2
                     rc[1] := ::nTop  + 3
                     rc[3] := ::nTop  + 25
                     C5_DrawThemeBackground( hTheme, hDC, 4, 1, rc )
             endcase

          endif

          SelectObject( hDC, hOldPen )
          DeleteObject( hPenTick )

          C5_CloseThemeData()
          rc    := { ::aRect[1], ::aRect[2], ::aRect[3], ::aRect[4] }

       endif

    else


        if ::lBorder
           FillSolidRect(hDC, rc, GetSysColor(15), 0 )
        else
           FillSolidRect(hDC, rc, GetSysColor(15) )
        endif

        rcText := {rc[1],rc[2],rc[3],rc[4]}

        if ::lModalFrame
           rc := {::aRect[1],::aRect[2],::aRect[3],::aRect[4]}
           DrawEdge( hDC, rc, 0x0002, nOr(0x0001 , 0x0002 , 0x0004 , 0x0008) )
           rc[1]++; rc[2]++; rc[3]--; rc[4]--
           DrawEdge( hDC, rc, 0x0008, nOr(0x0001 , 0x0002 , 0x0004 , 0x0008) )
           rc[1]--; rc[2]--; rc[3]++; rc[4]++
        endif

    endif

    if ::lTicks

       do case
          case ::nBtn == 1

               nTick0 :=  7
               nLine  := 21
               nBtn   := 11

          case ::nBtn == 0

               nTick0 :=  7
               nTick1 := 34
               nLine  := 20
               nBtn   := 11

          case ::nBtn == 2

               nTick1 := 26
               nLine  := 11
               nBtn   :=  3
       endcase

    else

       do case
          case ::nBtn == 1
               nLine := 13
               nBtn  := 3

          case ::nBtn == 0
               nLine := 12
               nBtn  :=  3

          case ::nBtn == 2
               nLine := 11
               nBtn  := 3
       endcase
    endif

    if ::lVertical

       nHW = (rc[3]-rc[1]-18-9)/(::nTicks-1)
       rc2[1] += 9
       rc2[3] := rc[3] - 9
       rc2[2] += nLine
       rc2[4] := rc2[2]+4
    else
       nHW := (rc[4]-rc[2]-18-9)/(::nTicks-1)
       rc2[1] += nLine
       rc2[3] := rc2[1] + 4
       rc2[2] += 9
       rc2[4] := rc[4]-9
    endif

    if lTemas() .AND. !::oWnd:lPocketPc()  .AND. C5_IsAppThemed() .AND. C5_IsThemeActive()
       color := GetThemeColor (hTheme, 9, 1)
       hPenTick := CreatePen( 0, 1, color )
       hOldPen := SelectObject( hDC, hPenTick )
    else

        DrawEdge( hdc, rc2, 0x0002, nOr(0x0001 , 0x0002 , 0x0004 , 0x0008) )
        rc2[1]++; rc2[2]++; rc2[3]--; rc2[4]--
        DrawEdge( hdc, rc2, 0x0008, nOr(0x0001 , 0x0002 , 0x0004 , 0x0008) )

        hOldPen := SelectObject( hDC, gris1 )
        if ::lVertical
           ::PaintClassicArrow( hDC, rc[2]+nBtn, rc[1]+9, blanco, gris0, gris1, gris2 )
        else
           ::PaintClassicArrow( hDC, rc[2]+9, rc[1]+nBtn, blanco, gris0, gris1, gris2 )
        endif
    endif

    for i := 0 to ::nTicks -1

        if ::lVertical

           nTop := ::nTop + 14 + ( nHW * (i-1) ) + nHW

           if ::lTicks .AND. ( ::nBtn == 0 .OR. ::nBtn == 1 )
              MoveTo( hDC, ::nLeft + nTick0, nTop )
              LineTo( hDC, ::nLeft + nTick0+ 4, nTop )
           endif

           if ::lTicks .AND. ( ::nBtn == 0 .OR. ::nBtn == 2 )
              MoveTo( hDC, ::nLeft + nTick1, nTop )
              LineTo( hDC, ::nLeft + nTick1+ 4, nTop  )
           endif
        else
           nLeft := ::nLeft + 14 +( nHW * (i-1) ) + nHW

           if ::lTicks .AND. ( ::nBtn == 0 .OR. ::nBtn == 1 )
              MoveTo( hDC, nLeft, ::nTop + nTick0 )
              LineTo( hDC, nLeft, ::nTop + nTick0 + 4 )
           endif

           if ::lTicks .AND. (::nBtn == 0 .OR. ::nBtn == 2 )
              MoveTo( hDC, nLeft, ::nTop + nTick1 )
              LineTo( hDC, nLeft, ::nTop + nTick1 + 4 )
           endif
        endif

    next



    SelectObject( hDC, hOldPen )
    DeleteObject( blanco )
    DeleteObject( gris0  )
    DeleteObject( gris1  )
    DeleteObject( gris2  )
    if hPenTick <> nil
       DeleteObject( hPenTick )
    endif


if ::oWnd:oSelected <> nil .AND. (::oWnd:oSelected:nItemId == ::nItemId .OR. ::lSelected)
   ::DotsSelect( hDC )
endif
return nil



      static FUNCTION TDsgnSlider_ContextMenu( nRow, nCol ) ; local Self AS CLASS TDsgnSlider := QSelf() AS CLASS TDsgnSlider

local oMenu
local o := self


    MenuAddItem("lBorder"      ,,o:lBorder       ,,{|oMenuItem|::lBorder     := !::lBorder     ,::Refresh()},,,,,,,.F.,,,.F. )
    MenuAddItem("lActive"      ,,o:lActive       ,,{|oMenuItem|::lActive     := !::lActive     ,::Refresh()},,,,,,,.F.,,,.F. )
    MenuAddItem("lVertical"    ,,o:lVertical     ,,{|oMenuItem|::lVertical   := !::lVertical   ,::Refresh()},,,,,,,.F.,,,.F. )
    MenuAddItem( "Flecha",, .F.,,,,,,,,, .F.,,, .F. )
    MenuBegin( .F.,,, .F., .F. )
       MenuAddItem("Both"      ,,o:nBtn == 0     ,,{|oMenuItem|::nBtn    := 0   ,::Refresh()},,,,,,,.F.,,,.F. )
       MenuAddItem("Up"        ,,o:nBtn == 1     ,,{|oMenuItem|::nBtn    := 1   ,::Refresh()},,,,,,,.F.,,,.F. )
       MenuAddItem("Down"      ,,o:nBtn == 2     ,,{|oMenuItem|::nBtn    := 2   ,::Refresh()},,,,,,,.F.,,,.F. )
    MenuEnd()


   MenuAddItem()



return nil



   static FUNCTION TDsgnSlider_PaintClassicArrow( dc, nLeft, nTop, blanco, gris0, gris1, gris2 ) ; local Self AS CLASS TDsgnSlider := QSelf() AS CLASS TDsgnSlider


  local rc
  local hOldPen



  if !::lVertical

     rc := {nTop, nLeft, nTop + 21, nLeft + 10 }
     FillSolidRect( dc, rc, GetSysColor( 15 ) )

     do case
        case ::nBtn == 0

             hOldPen := SelectObject( dc, blanco )
             MoveTo( dc, nLeft, nTop + 20 )
             LineTo( dc, nLeft, nTop )
             LineTo( dc, nLeft + 11, nTop )
             SelectObject( dc, hOldPen )

             hOldPen := SelectObject( dc,  gris0 )
             MoveTo( dc, nLeft+ 1, nTop + 19 )
             LineTo( dc, nLeft+ 1, nTop +  1 )
             LineTo( dc, nLeft+ 10, nTop +  1 )
             SelectObject( dc, hOldPen )

             hOldPen := SelectObject( dc, gris1 )
             MoveTo( dc, nLeft+ 1, nTop + 20 )
             LineTo( dc, nLeft+ 9, nTop + 20 )
             LineTo( dc, nLeft+ 9, nTop +  1 )
             SelectObject( dc, hOldPen )

             hOldPen := SelectObject( dc, gris2 )
             MoveTo( dc, nLeft, nTop + 21 )
             LineTo( dc, nLeft + 10, nTop + 21 )
             LineTo( dc, nLeft + 10, nTop )
             SelectObject( dc, hOldPen )

        case ::nBtn == 1

             hOldPen := SelectObject( dc, blanco )
             MoveTo( dc, nLeft+4, nTop +  1 )
             LineTo( dc, nLeft  , nTop +  5 )
             LineTo( dc, nLeft  , nTop + 21 )
             SelectObject( dc, hOldPen )

             hOldPen := SelectObject( dc, gris0 )
             MoveTo( dc, nLeft+ 4, nTop +   2 )
             LineTo( dc, nLeft+ 1, nTop +   5 )
             LineTo( dc, nLeft+ 1, nTop + 20 )
             SelectObject( dc, hOldPen )

             hOldPen := SelectObject( dc, gris1 )
             MoveTo( dc, nLeft+ 1, nTop + 20 )
             LineTo( dc, nLeft+ 9, nTop + 20 )
             LineTo( dc, nLeft+ 9, nTop +  5 )
             LineTo( dc, nLeft+ 4, nTop      )
             SelectObject( dc, hOldPen )

             hOldPen := SelectObject( dc, gris2 )
             MoveTo( dc, nLeft, nTop + 21 )
             LineTo( dc, nLeft + 10, nTop + 21 )
             LineTo( dc, nLeft + 10, nTop +  5 )
             LineTo( dc, nLeft +  4, nTop -1   )
             SelectObject( dc, hOldPen )

        case ::nBtn == 2

             hOldPen := SelectObject( dc, blanco )
             MoveTo( dc, nLeft +  9, nTop )
             LineTo( dc, nLeft, nTop )
             LineTo( dc, nLeft, nTop + 16 )
             LineTo( dc, nLeft+5, nTop + 21 )
             SelectObject( dc, hOldPen )

             hOldPen := SelectObject( dc, gris0 )
             MoveTo( dc, nLeft+ 8, nTop +  1 )
             LineTo( dc, nLeft+ 1, nTop +  1 )
             LineTo( dc, nLeft+ 1, nTop + 16 )
             LineTo( dc, nLeft+ 5, nTop + 20 )

             SelectObject( dc, hOldPen )
             hOldPen := SelectObject( dc, gris1 )
             MoveTo( dc, nLeft+ 9, nTop +  1 )
             LineTo( dc, nLeft+ 9, nTop + 16 )
             LineTo( dc, nLeft+ 4, nTop + 21 )
             SelectObject( dc, hOldPen )

             hOldPen := SelectObject( dc,  gris2 )
             MoveTo( dc,  nLeft + 10, nTop )
             LineTo( dc,  nLeft + 10, nTop + 16 )
             LineTo( dc,  nLeft +  4, nTop + 22 )
             SelectObject( dc,  hOldPen )

     endcase

  else

     rc := { nTop, nLeft , nTop + 10, nLeft + 21 }
     FillSolidRect( dc, rc, GetSysColor( 15 ) )
     do case
        case ::nBtn == 0

             hOldPen := SelectObject( dc,  blanco )
             MoveTo( dc,  nLeft + 20, nTop )
             LineTo( dc,  nLeft, nTop )
             LineTo( dc,  nLeft, nTop + 11 )
             SelectObject( dc,  hOldPen )

             hOldPen := SelectObject( dc,  gris0 )
             MoveTo( dc,  nLeft+ 19, nTop +  1 )
             LineTo( dc,  nLeft+ 1, nTop +  1 )
             LineTo( dc,  nLeft+ 1, nTop + 10 )
             SelectObject( dc,  hOldPen )

             hOldPen := SelectObject( dc,  gris1 )
             MoveTo( dc,  nLeft+ 1, nTop + 9 )
             LineTo( dc,  nLeft+ 20, nTop + 9 )
             LineTo( dc,  nLeft+ 20, nTop  )
             SelectObject( dc,  hOldPen )

             hOldPen := SelectObject( dc,  gris2 )
             MoveTo( dc,  nLeft, nTop + 10 )
             LineTo( dc,  nLeft + 21, nTop + 10 )
             LineTo( dc,  nLeft + 21, nTop - 1 )
             SelectObject( dc,  hOldPen )

        case ::nBtn == 1

             hOldPen := SelectObject( dc,  blanco )
             MoveTo( dc,  nLeft+ 1, nTop +  4 )
             LineTo( dc,  nLeft+ 5, nTop  )
             LineTo( dc,  nLeft+21, nTop )
             SelectObject( dc,  hOldPen )

             hOldPen := SelectObject( dc,  gris0 )
             MoveTo( dc,  nLeft+  2, nTop + 4 )
             LineTo( dc,  nLeft+  5, nTop + 1 )
             LineTo( dc,  nLeft+ 20, nTop + 1 )
             SelectObject( dc,  hOldPen )

             hOldPen := SelectObject( dc,  gris1 )
             MoveTo( dc,  nLeft+  1, nTop + 5 )
             LineTo( dc,  nLeft+  5, nTop + 9 )
             LineTo( dc,  nLeft+ 20, nTop + 9 )
             LineTo( dc,  nLeft+ 20, nTop     )
             SelectObject( dc,  hOldPen )

             hOldPen := SelectObject( dc,  gris2 )
             MoveTo( dc,  nLeft     , nTop +  5 )
             LineTo( dc,  nLeft +  5, nTop + 10 )
             LineTo( dc,  nLeft + 21, nTop + 10 )
             LineTo( dc,  nLeft + 21, nTop -  1 )
             SelectObject( dc,  hOldPen )

        case ::nBtn == 2

             hOldPen := SelectObject( dc,  blanco )
             MoveTo( dc,  nLeft   , nTop + 10 )
             LineTo( dc,  nLeft   , nTop      )
             LineTo( dc,  nLeft+16, nTop      )
             LineTo( dc,  nLeft+21, nTop +  5 )
             SelectObject( dc,  hOldPen )

             hOldPen := SelectObject( dc,  gris0 )
             MoveTo( dc,  nLeft+ 1, nTop +  9 )
             LineTo( dc,  nLeft+ 1, nTop +  1 )
             LineTo( dc,  nLeft+17, nTop +  1 )
             MoveTo( dc,  nLeft+17, nTop      )
             LineTo( dc,  nLeft+22, nTop +  5 )
             SelectObject( dc,  hOldPen )

             hOldPen := SelectObject( dc,  gris1 )
             MoveTo( dc,  nLeft+ 1, nTop +  9 )
             LineTo( dc,  nLeft+16, nTop +  9 )
             LineTo( dc,  nLeft+21, nTop +  4 )
             SelectObject( dc,  hOldPen )

             hOldPen := SelectObject( dc,  gris2 )
             MoveTo( dc,  nLeft     , nTop + 10 )
             LineTo( dc,  nLeft + 16, nTop + 10 )
             LineTo( dc,  nLeft + 22, nTop +  4 )
             SelectObject( dc,  hOldPen )
     endcase
  endif

return nil
