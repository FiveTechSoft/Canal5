/*
 * xHarbour build 0.99.71 Intl. (SimpLex)
 * Generated C source code from <functions.prg>
 * Command: C:\xharbour\bin\harbour.exe -i.;\fwh\include;\xharbour\include -n -m -w -es2 -gc0 -p .\functions.prg -oobj\functions.hrb 
 * Created: 2008.01.11 16:22:09 (Borland C++ 5.5.1)
 */

#include "hbvmpub.h"
#include "hbinit.h"

#define __PRG_SOURCE__ "functions.prg"

HB_FUNC( FILLRECTBMP );
HB_FUNC( APAPERS );
HB_FUNC( ASIZEPAPERS );
HB_FUNC( VPIX2MM );
HB_FUNC( HPIX2MM );
HB_FUNC( VMM2PIX );
HB_FUNC( HMM2PIX );
HB_FUNC( ATOKENS );
HB_FUNC( STRTRIM );
HB_FUNC( MEMOWRITEX );
HB_FUNC( C5SIMBOL );
HB_FUNC( C5GETFONTNAMES );
HB_FUNC( EDITBMP );
HB_FUNC( EDITTEXT );
HB_FUNC( EDITDBF );
HB_FUNC( GETFIELDS );
HB_FUNC( TPENEXT );
HB_FUNC_STATIC( TPENEXT_NEW );
HB_FUNC_INITSTATICS();
HB_FUNC_EXTERN( LOADBITMAP );
HB_FUNC_EXTERN( GETRESOURCES );
HB_FUNC_EXTERN( CREATEPATTERNBRUSH );
HB_FUNC_EXTERN( SETBRUSHORG );
HB_FUNC_EXTERN( FILLRECT );
HB_FUNC_EXTERN( DELETEOBJECT );
HB_FUNC_EXTERN( CREATEDC );
HB_FUNC_EXTERN( GETDEVICECAPS );
HB_FUNC_EXTERN( DELETEDC );
HB_FUNC_EXTERN( EMPTY );
HB_FUNC_EXTERN( STRTOKEN );
HB_FUNC_EXTERN( AADD );
HB_FUNC_EXTERN( ALLTRIM );
HB_FUNC_EXTERN( STR );
HB_FUNC_EXTERN( FCREATE );
HB_FUNC_EXTERN( FWRITE );
HB_FUNC_EXTERN( FCLOSE );
HB_FUNC_EXTERN( SETBKMODE );
HB_FUNC_EXTERN( TFONT );
HB_FUNC_EXTERN( SELECTOBJECT );
HB_FUNC_EXTERN( SETTEXTCOLOR );
HB_FUNC_EXTERN( TEXTOUT );
HB_FUNC_EXTERN( BOX );
HB_FUNC_EXTERN( GETDC );
HB_FUNC_EXTERN( INSPECTOR );
HB_FUNC_EXTERN( GETFONTNAMES );
HB_FUNC_EXTERN( ASORT );
HB_FUNC_EXTERN( RELEASEDC );
HB_FUNC_EXTERN( GETMODULEFILENAME );
HB_FUNC_EXTERN( GETINSTANCE );
HB_FUNC_EXTERN( CFILEPATH );
HB_FUNC_EXTERN( LEFT );
HB_FUNC_EXTERN( LEN );
HB_FUNC_EXTERN( UPPER );
HB_FUNC_EXTERN( CGETFILE );
HB_FUNC_EXTERN( STRTRAN );
HB_FUNC_EXTERN( SYSREFRESH );
HB_FUNC_EXTERN( OWND );
HB_FUNC_EXTERN( PADR );
HB_FUNC_EXTERN( TDIALOG );
HB_FUNC_EXTERN( TMULTIGET );
HB_FUNC_EXTERN( PCOUNT );
HB_FUNC_EXTERN( TBUTTON );
HB_FUNC_EXTERN( DBUSEAREA );
HB_FUNC_EXTERN( DBSTRUCT );
HB_FUNC_EXTERN( DBCLOSEAREA );
HB_FUNC_EXTERN( HBCLASS );
HB_FUNC_EXTERN( __CLS_PARAM );
HB_FUNC_EXTERN( __CLSINST );
HB_FUNC_EXTERN( __OBJHASMSG );
HB_FUNC_EXTERN( HB_APARAMS );
HB_FUNC_EXTERN( EXTCREATEPEN );
HB_FUNC_EXTERN( GETPROCADDRESS );
HB_FUNC_EXTERN( TACTIVEX );
HB_FUNC_EXTERN( ERRORSYS );

#undef HB_PRG_PCODE_VER
#define HB_PRG_PCODE_VER 7

HB_INIT_SYMBOLS_BEGIN( hb_vm_SymbolInit_FUNCTIONS )
{ "FILLRECTBMP", {HB_FS_PUBLIC | HB_FS_LOCAL | HB_FS_FIRST}, {HB_FUNCNAME( FILLRECTBMP )}, NULL },
{ "LOADBITMAP", {HB_FS_PUBLIC}, {HB_FUNCNAME( LOADBITMAP )}, NULL },
{ "GETRESOURCES", {HB_FS_PUBLIC}, {HB_FUNCNAME( GETRESOURCES )}, NULL },
{ "CREATEPATTERNBRUSH", {HB_FS_PUBLIC}, {HB_FUNCNAME( CREATEPATTERNBRUSH )}, NULL },
{ "SETBRUSHORG", {HB_FS_PUBLIC}, {HB_FUNCNAME( SETBRUSHORG )}, NULL },
{ "FILLRECT", {HB_FS_PUBLIC}, {HB_FUNCNAME( FILLRECT )}, NULL },
{ "DELETEOBJECT", {HB_FS_PUBLIC}, {HB_FUNCNAME( DELETEOBJECT )}, NULL },
{ "APAPERS", {HB_FS_PUBLIC | HB_FS_LOCAL}, {HB_FUNCNAME( APAPERS )}, NULL },
{ "ASIZEPAPERS", {HB_FS_PUBLIC | HB_FS_LOCAL}, {HB_FUNCNAME( ASIZEPAPERS )}, NULL },
{ "VPIX2MM", {HB_FS_PUBLIC | HB_FS_LOCAL}, {HB_FUNCNAME( VPIX2MM )}, NULL },
{ "CREATEDC", {HB_FS_PUBLIC}, {HB_FUNCNAME( CREATEDC )}, NULL },
{ "GETDEVICECAPS", {HB_FS_PUBLIC}, {HB_FUNCNAME( GETDEVICECAPS )}, NULL },
{ "DELETEDC", {HB_FS_PUBLIC}, {HB_FUNCNAME( DELETEDC )}, NULL },
{ "HPIX2MM", {HB_FS_PUBLIC | HB_FS_LOCAL}, {HB_FUNCNAME( HPIX2MM )}, NULL },
{ "VMM2PIX", {HB_FS_PUBLIC | HB_FS_LOCAL}, {HB_FUNCNAME( VMM2PIX )}, NULL },
{ "HMM2PIX", {HB_FS_PUBLIC | HB_FS_LOCAL}, {HB_FUNCNAME( HMM2PIX )}, NULL },
{ "ATOKENS", {HB_FS_PUBLIC | HB_FS_LOCAL}, {HB_FUNCNAME( ATOKENS )}, NULL },
{ "EMPTY", {HB_FS_PUBLIC}, {HB_FUNCNAME( EMPTY )}, NULL },
{ "STRTOKEN", {HB_FS_PUBLIC}, {HB_FUNCNAME( STRTOKEN )}, NULL },
{ "AADD", {HB_FS_PUBLIC}, {HB_FUNCNAME( AADD )}, NULL },
{ "STRTRIM", {HB_FS_PUBLIC | HB_FS_LOCAL}, {HB_FUNCNAME( STRTRIM )}, NULL },
{ "ALLTRIM", {HB_FS_PUBLIC}, {HB_FUNCNAME( ALLTRIM )}, NULL },
{ "STR", {HB_FS_PUBLIC}, {HB_FUNCNAME( STR )}, NULL },
{ "MEMOWRITEX", {HB_FS_PUBLIC | HB_FS_LOCAL}, {HB_FUNCNAME( MEMOWRITEX )}, NULL },
{ "FCREATE", {HB_FS_PUBLIC}, {HB_FUNCNAME( FCREATE )}, NULL },
{ "FWRITE", {HB_FS_PUBLIC}, {HB_FUNCNAME( FWRITE )}, NULL },
{ "FCLOSE", {HB_FS_PUBLIC}, {HB_FUNCNAME( FCLOSE )}, NULL },
{ "C5SIMBOL", {HB_FS_PUBLIC | HB_FS_LOCAL}, {HB_FUNCNAME( C5SIMBOL )}, NULL },
{ "SETBKMODE", {HB_FS_PUBLIC}, {HB_FUNCNAME( SETBKMODE )}, NULL },
{ "NEW", {HB_FS_PUBLIC | HB_FS_MEMVAR | HB_FS_MESSAGE}, {NULL}, NULL },
{ "TFONT", {HB_FS_PUBLIC}, {HB_FUNCNAME( TFONT )}, NULL },
{ "SELECTOBJECT", {HB_FS_PUBLIC}, {HB_FUNCNAME( SELECTOBJECT )}, NULL },
{ "HFONT", {HB_FS_PUBLIC | HB_FS_MEMVAR | HB_FS_MESSAGE}, {NULL}, NULL },
{ "SETTEXTCOLOR", {HB_FS_PUBLIC}, {HB_FUNCNAME( SETTEXTCOLOR )}, NULL },
{ "TEXTOUT", {HB_FS_PUBLIC}, {HB_FUNCNAME( TEXTOUT )}, NULL },
{ "END", {HB_FS_PUBLIC | HB_FS_MEMVAR | HB_FS_MESSAGE}, {NULL}, NULL },
{ "BOX", {HB_FS_PUBLIC}, {HB_FUNCNAME( BOX )}, NULL },
{ "C5GETFONTNAMES", {HB_FS_PUBLIC | HB_FS_LOCAL}, {HB_FUNCNAME( C5GETFONTNAMES )}, NULL },
{ "GETDC", {HB_FS_PUBLIC}, {HB_FUNCNAME( GETDC )}, NULL },
{ "HWND", {HB_FS_PUBLIC | HB_FS_MEMVAR | HB_FS_MESSAGE}, {NULL}, NULL },
{ "INSPECTOR", {HB_FS_PUBLIC}, {HB_FUNCNAME( INSPECTOR )}, NULL },
{ "GETFONTNAMES", {HB_FS_PUBLIC}, {HB_FUNCNAME( GETFONTNAMES )}, NULL },
{ "ASORT", {HB_FS_PUBLIC}, {HB_FUNCNAME( ASORT )}, NULL },
{ "RELEASEDC", {HB_FS_PUBLIC}, {HB_FUNCNAME( RELEASEDC )}, NULL },
{ "EDITBMP", {HB_FS_PUBLIC | HB_FS_LOCAL}, {HB_FUNCNAME( EDITBMP )}, NULL },
{ "GETMODULEFILENAME", {HB_FS_PUBLIC}, {HB_FUNCNAME( GETMODULEFILENAME )}, NULL },
{ "GETINSTANCE", {HB_FS_PUBLIC}, {HB_FUNCNAME( GETINSTANCE )}, NULL },
{ "CFILEPATH", {HB_FS_PUBLIC}, {HB_FUNCNAME( CFILEPATH )}, NULL },
{ "LEFT", {HB_FS_PUBLIC}, {HB_FUNCNAME( LEFT )}, NULL },
{ "LEN", {HB_FS_PUBLIC}, {HB_FUNCNAME( LEN )}, NULL },
{ "UPPER", {HB_FS_PUBLIC}, {HB_FUNCNAME( UPPER )}, NULL },
{ "CGETFILE", {HB_FS_PUBLIC}, {HB_FUNCNAME( CGETFILE )}, NULL },
{ "STRTRAN", {HB_FS_PUBLIC}, {HB_FUNCNAME( STRTRAN )}, NULL },
{ "SYSREFRESH", {HB_FS_PUBLIC}, {HB_FUNCNAME( SYSREFRESH )}, NULL },
{ "REFRESH", {HB_FS_PUBLIC | HB_FS_MEMVAR | HB_FS_MESSAGE}, {NULL}, NULL },
{ "OWND", {HB_FS_PUBLIC}, {HB_FUNCNAME( OWND )}, NULL },
{ "EDITTEXT", {HB_FS_PUBLIC | HB_FS_LOCAL}, {HB_FUNCNAME( EDITTEXT )}, NULL },
{ "PADR", {HB_FS_PUBLIC}, {HB_FUNCNAME( PADR )}, NULL },
{ "TDIALOG", {HB_FS_PUBLIC}, {HB_FUNCNAME( TDIALOG )}, NULL },
{ "TMULTIGET", {HB_FS_PUBLIC}, {HB_FUNCNAME( TMULTIGET )}, NULL },
{ "PCOUNT", {HB_FS_PUBLIC}, {HB_FUNCNAME( PCOUNT )}, NULL },
{ "TBUTTON", {HB_FS_PUBLIC}, {HB_FUNCNAME( TBUTTON )}, NULL },
{ "ACTIVATE", {HB_FS_PUBLIC | HB_FS_MEMVAR | HB_FS_MESSAGE}, {NULL}, NULL },
{ "BLCLICKED", {HB_FS_PUBLIC | HB_FS_MEMVAR | HB_FS_MESSAGE}, {NULL}, NULL },
{ "BMOVED", {HB_FS_PUBLIC | HB_FS_MEMVAR | HB_FS_MESSAGE}, {NULL}, NULL },
{ "BPAINTED", {HB_FS_PUBLIC | HB_FS_MEMVAR | HB_FS_MESSAGE}, {NULL}, NULL },
{ "BRCLICKED", {HB_FS_PUBLIC | HB_FS_MEMVAR | HB_FS_MESSAGE}, {NULL}, NULL },
{ "EDITDBF", {HB_FS_PUBLIC | HB_FS_LOCAL}, {HB_FUNCNAME( EDITDBF )}, NULL },
{ "GETFIELDS", {HB_FS_PUBLIC | HB_FS_LOCAL}, {HB_FUNCNAME( GETFIELDS )}, NULL },
{ "DBUSEAREA", {HB_FS_PUBLIC}, {HB_FUNCNAME( DBUSEAREA )}, NULL },
{ "TEST", {HB_FS_PUBLIC | HB_FS_MEMVAR}, {NULL}, NULL },
{ "DBSTRUCT", {HB_FS_PUBLIC}, {HB_FUNCNAME( DBSTRUCT )}, NULL },
{ "DBCLOSEAREA", {HB_FS_PUBLIC}, {HB_FUNCNAME( DBCLOSEAREA )}, NULL },
{ "TPENEXT", {HB_FS_PUBLIC | HB_FS_LOCAL}, {HB_FUNCNAME( TPENEXT )}, NULL },
{ "HBCLASS", {HB_FS_PUBLIC}, {HB_FUNCNAME( HBCLASS )}, NULL },
{ "__CLS_PARAM", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLS_PARAM )}, NULL },
{ "ADDMULTIDATA", {HB_FS_PUBLIC | HB_FS_MEMVAR | HB_FS_MESSAGE}, {NULL}, NULL },
{ "ADDMETHOD", {HB_FS_PUBLIC | HB_FS_MEMVAR | HB_FS_MESSAGE}, {NULL}, NULL },
{ "TPENEXT_NEW", {HB_FS_STATIC | HB_FS_LOCAL}, {HB_FUNCNAME( TPENEXT_NEW )}, NULL },
{ "ADDINLINE", {HB_FS_PUBLIC | HB_FS_MEMVAR | HB_FS_MESSAGE}, {NULL}, NULL },
{ "HPEN", {HB_FS_PUBLIC | HB_FS_MEMVAR | HB_FS_MESSAGE}, {NULL}, NULL },
{ "_HPEN", {HB_FS_PUBLIC | HB_FS_MEMVAR | HB_FS_MESSAGE}, {NULL}, NULL },
{ "CREATE", {HB_FS_PUBLIC | HB_FS_MEMVAR | HB_FS_MESSAGE}, {NULL}, NULL },
{ "HCLASS", {HB_FS_PUBLIC | HB_FS_MEMVAR | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__CLSINST", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSINST )}, NULL },
{ "__OBJHASMSG", {HB_FS_PUBLIC}, {HB_FUNCNAME( __OBJHASMSG )}, NULL },
{ "INITCLASS", {HB_FS_PUBLIC | HB_FS_MEMVAR | HB_FS_MESSAGE}, {NULL}, NULL },
{ "HB_APARAMS", {HB_FS_PUBLIC}, {HB_FUNCNAME( HB_APARAMS )}, NULL },
{ "CONSTRUCTORCALL", {HB_FS_PUBLIC | HB_FS_MEMVAR | HB_FS_MESSAGE}, {NULL}, NULL },
{ "_NWIDTH", {HB_FS_PUBLIC | HB_FS_MEMVAR | HB_FS_MESSAGE}, {NULL}, NULL },
{ "NLOGPIXELY", {HB_FS_PUBLIC | HB_FS_MEMVAR | HB_FS_MESSAGE}, {NULL}, NULL },
{ "NWIDTH", {HB_FS_PUBLIC | HB_FS_MEMVAR | HB_FS_MESSAGE}, {NULL}, NULL },
{ "_ODEVICE", {HB_FS_PUBLIC | HB_FS_MEMVAR | HB_FS_MESSAGE}, {NULL}, NULL },
{ "EXTCREATEPEN", {HB_FS_PUBLIC}, {HB_FUNCNAME( EXTCREATEPEN )}, NULL },
{ "_NCOLOR", {HB_FS_PUBLIC | HB_FS_MEMVAR | HB_FS_MESSAGE}, {NULL}, NULL },
{ "GETPROCADDRESS", {HB_FS_PUBLIC}, {HB_FUNCNAME( GETPROCADDRESS )}, NULL },
{ "TACTIVEX", {HB_FS_PUBLIC}, {HB_FUNCNAME( TACTIVEX )}, NULL },
{ "ERRORSYS", {HB_FS_PUBLIC}, {HB_FUNCNAME( ERRORSYS )}, NULL },
{ "(_INITSTATICS00001)", {HB_FS_INITEXIT}, {hb_INITSTATICS}, NULL }
HB_INIT_SYMBOLS_END( hb_vm_SymbolInit_FUNCTIONS )

#if defined(HB_PRAGMA_STARTUP)
   #pragma startup hb_vm_SymbolInit_FUNCTIONS
#elif defined(HB_MSC_STARTUP)
   #if _MSC_VER >= 1010
      #pragma data_seg( ".CRT$XIY" )
      #pragma comment( linker, "/Merge:.CRT=.data" )
   #else
      #pragma data_seg( "XIY" )
   #endif
   static HB_$INITSYM hb_vm_auto_SymbolInit_FUNCTIONS = hb_vm_SymbolInit_FUNCTIONS;
   #pragma data_seg()
#endif

HB_FUNC( FILLRECTBMP )

{
   static const BYTE pcode[] =
   {
13, 2, 3, 133, 6, 0, 108, 1, 100, 108, 2, 100, 12, 0, 
	95, 3, 12, 2, 80, 4, 134, 1, 108, 3, 100, 95, 4, 12, 
	1, 80, 5, 134, 3, 108, 4, 100, 95, 1, 95, 5, 95, 2, 
	92, 2, 1, 95, 2, 122, 1, 20, 4, 134, 4, 108, 5, 100, 
	95, 1, 95, 2, 95, 5, 20, 3, 134, 6, 108, 6, 100, 95, 
	5, 20, 1, 134, 7, 108, 6, 100, 95, 4, 20, 1, 134, 9, 
	121, 110, 7
   };

   hb_vmExecute( pcode, symbols, NULL );
}

HB_FUNC( APAPERS )

{
   static const BYTE pcode[] =
   {
133, 58, 0, 106, 9, 49, 48, 120, 49, 52, 32, 105, 110, 0, 
	106, 9, 49, 49, 120, 49, 55, 32, 105, 110, 0, 106, 32, 54, 
	32, 51, 47, 52, 32, 69, 110, 118, 101, 108, 111, 112, 101, 32, 
	51, 32, 53, 47, 56, 32, 120, 32, 54, 32, 49, 47, 50, 32, 
	105, 110, 0, 106, 16, 65, 51, 32, 50, 57, 55, 32, 120, 32, 
	52, 50, 48, 32, 109, 109, 0, 106, 16, 65, 52, 32, 50, 49, 
	48, 32, 120, 32, 50, 57, 55, 32, 109, 109, 0, 106, 22, 65, 
	52, 32, 83, 109, 97, 108, 108, 32, 50, 49, 48, 32, 120, 32, 
	50, 57, 55, 32, 109, 109, 0, 106, 16, 65, 53, 32, 49, 52, 
	56, 32, 120, 32, 50, 49, 48, 32, 109, 109, 0, 106, 16, 66, 
	52, 32, 50, 53, 48, 32, 120, 32, 51, 53, 52, 32, 109, 109, 
	0, 106, 16, 66, 53, 32, 49, 56, 50, 32, 120, 32, 50, 53, 
	55, 32, 109, 109, 0, 106, 13, 67, 32, 115, 105, 122, 101, 32, 
	115, 104, 101, 101, 116, 0, 106, 13, 68, 32, 115, 105, 122, 101, 
	32, 115, 104, 101, 101, 116, 0, 106, 13, 69, 32, 115, 105, 122, 
	101, 32, 115, 104, 101, 101, 116, 0, 106, 27, 69, 110, 118, 101, 
	108, 111, 112, 101, 32, 35, 49, 48, 32, 52, 32, 49, 47, 56, 
	32, 120, 32, 57, 32, 49, 47, 50, 0, 106, 28, 69, 110, 118, 
	101, 108, 111, 112, 101, 32, 35, 49, 49, 32, 52, 32, 49, 47, 
	50, 32, 120, 32, 49, 48, 32, 51, 47, 56, 0, 106, 25, 69, 
	110, 118, 101, 108, 111, 112, 101, 32, 35, 49, 50, 32, 52, 32, 
	92, 50, 55, 54, 32, 120, 32, 49, 49, 0, 106, 24, 69, 110, 
	118, 101, 108, 111, 112, 101, 32, 35, 49, 52, 32, 53, 32, 120, 
	32, 49, 49, 32, 49, 47, 50, 0, 106, 26, 69, 110, 118, 101, 
	108, 111, 112, 101, 32, 35, 57, 32, 51, 32, 55, 47, 56, 32, 
	120, 32, 56, 32, 55, 47, 56, 0, 106, 22, 69, 110, 118, 101, 
	108, 111, 112, 101, 32, 49, 49, 48, 32, 120, 32, 50, 51, 48, 
	32, 109, 109, 0, 106, 26, 69, 110, 118, 101, 108, 111, 112, 101, 
	32, 66, 52, 32, 32, 50, 53, 48, 32, 120, 32, 51, 53, 51, 
	32, 109, 109, 0, 106, 26, 69, 110, 118, 101, 108, 111, 112, 101, 
	32, 66, 53, 32, 32, 49, 55, 54, 32, 120, 32, 50, 53, 48, 
	32, 109, 109, 0, 106, 26, 69, 110, 118, 101, 108, 111, 112, 101, 
	32, 66, 54, 32, 32, 49, 55, 54, 32, 120, 32, 49, 50, 53, 
	32, 109, 109, 0, 106, 26, 69, 110, 118, 101, 108, 111, 112, 101, 
	32, 67, 51, 32, 32, 51, 50, 52, 32, 120, 32, 52, 53, 56, 
	32, 109, 109, 0, 106, 26, 69, 110, 118, 101, 108, 111, 112, 101, 
	32, 67, 52, 32, 32, 50, 50, 57, 32, 120, 32, 51, 50, 52, 
	32, 109, 109, 0, 106, 25, 69, 110, 118, 101, 108, 111, 112, 101, 
	32, 67, 53, 32, 49, 54, 50, 32, 120, 32, 50, 50, 57, 32, 
	109, 109, 0, 106, 26, 69, 110, 118, 101, 108, 111, 112, 101, 32, 
	67, 54, 32, 32, 49, 49, 52, 32, 120, 32, 49, 54, 50, 32, 
	109, 109, 0, 106, 26, 69, 110, 118, 101, 108, 111, 112, 101, 32, 
	67, 54, 53, 32, 49, 49, 52, 32, 120, 32, 50, 50, 57, 32, 
	109, 109, 0, 106, 24, 69, 110, 118, 101, 108, 111, 112, 101, 32, 
	68, 76, 32, 49, 49, 48, 32, 120, 32, 50, 50, 48, 109, 109, 
	0, 106, 32, 69, 110, 118, 101, 108, 111, 112, 101, 32, 77, 111, 
	110, 97, 114, 99, 104, 32, 51, 46, 56, 55, 53, 32, 120, 32, 
	55, 46, 53, 32, 105, 110, 0, 106, 28, 69, 120, 101, 99, 117, 
	116, 105, 118, 101, 32, 55, 32, 49, 47, 52, 32, 120, 32, 49, 
	48, 32, 49, 47, 50, 32, 105, 110, 0, 106, 20, 70, 111, 108, 
	105, 111, 32, 56, 32, 49, 47, 50, 32, 120, 32, 49, 51, 32, 
	105, 110, 0, 106, 35, 71, 101, 114, 109, 97, 110, 32, 76, 101, 
	103, 97, 108, 32, 70, 97, 110, 102, 111, 108, 100, 32, 56, 32, 
	49, 47, 50, 32, 120, 32, 49, 51, 32, 105, 110, 0, 106, 33, 
	71, 101, 114, 109, 97, 110, 32, 83, 116, 100, 32, 70, 97, 110, 
	102, 111, 108, 100, 32, 56, 32, 49, 47, 50, 32, 120, 32, 49, 
	50, 32, 105, 110, 0, 106, 18, 76, 101, 100, 103, 101, 114, 32, 
	49, 55, 32, 120, 32, 49, 49, 32, 105, 110, 0, 106, 20, 76, 
	101, 103, 97, 108, 32, 56, 32, 49, 47, 50, 32, 120, 32, 49, 
	52, 32, 105, 110, 0, 106, 21, 76, 101, 116, 116, 101, 114, 32, 
	56, 32, 49, 47, 50, 32, 120, 32, 49, 49, 32, 105, 110, 0, 
	106, 27, 76, 101, 116, 116, 101, 114, 32, 83, 109, 97, 108, 108, 
	32, 56, 32, 49, 47, 50, 32, 120, 32, 49, 49, 32, 105, 110, 
	0, 106, 19, 78, 111, 116, 101, 32, 56, 32, 49, 47, 50, 32, 
	120, 32, 49, 49, 32, 105, 110, 0, 106, 20, 81, 117, 97, 114, 
	116, 111, 32, 50, 49, 53, 32, 120, 32, 50, 55, 53, 32, 109, 
	109, 0, 106, 27, 83, 116, 97, 116, 101, 109, 101, 110, 116, 32, 
	53, 32, 49, 47, 50, 32, 120, 32, 56, 32, 49, 47, 50, 32, 
	105, 110, 0, 106, 19, 84, 97, 98, 108, 111, 105, 100, 32, 49, 
	49, 32, 120, 32, 49, 55, 32, 105, 110, 0, 106, 30, 85, 83, 
	32, 83, 116, 100, 32, 70, 97, 110, 102, 111, 108, 100, 32, 49, 
	52, 32, 55, 47, 56, 32, 120, 32, 49, 49, 32, 105, 110, 0, 
	4, 41, 0, 110, 7
   };

   hb_vmExecute( pcode, symbols, NULL );
}

HB_FUNC( ASIZEPAPERS )

{
   static const BYTE pcode[] =
   {
133, 102, 0, 93, 254, 0, 101, 154, 153, 153, 153, 153, 57, 118, 
	64, 10, 1, 4, 2, 0, 101, 102, 102, 102, 102, 102, 118, 113, 
	64, 10, 1, 101, 205, 204, 204, 204, 204, 252, 122, 64, 10, 1, 
	4, 2, 0, 101, 205, 204, 204, 204, 204, 4, 87, 64, 10, 3, 
	101, 51, 51, 51, 51, 51, 163, 100, 64, 10, 1, 4, 2, 0, 
	93, 41, 1, 93, 164, 1, 4, 2, 0, 93, 210, 0, 93, 41, 
	1, 4, 2, 0, 93, 210, 0, 93, 41, 1, 4, 2, 0, 93, 
	148, 0, 93, 210, 0, 4, 2, 0, 93, 250, 0, 93, 98, 1, 
	4, 2, 0, 93, 182, 0, 93, 1, 1, 4, 2, 0, 121, 121, 
	4, 2, 0, 121, 121, 4, 2, 0, 121, 121, 4, 2, 0, 101, 
	154, 153, 153, 153, 153, 49, 90, 64, 10, 3, 101, 154, 153, 153, 
	153, 153, 41, 110, 64, 10, 1, 4, 2, 0, 101, 51, 51, 51, 
	51, 51, 147, 92, 64, 10, 1, 101, 102, 102, 102, 102, 102, 120, 
	112, 64, 10, 3, 4, 2, 0, 101, 63, 53, 94, 186, 73, 108, 
	89, 64, 10, 3, 101, 102, 102, 102, 102, 102, 118, 113, 64, 10, 
	1, 4, 2, 0, 92, 127, 101, 154, 153, 153, 153, 153, 65, 114, 
	64, 10, 1, 4, 2, 0, 101, 51, 51, 51, 51, 51, 155, 88, 
	64, 10, 3, 101, 154, 153, 153, 153, 153, 45, 108, 64, 10, 3, 
	4, 2, 0, 92, 110, 93, 230, 0, 4, 2, 0, 93, 250, 0, 
	93, 97, 1, 4, 2, 0, 93, 176, 0, 93, 250, 0, 4, 2, 
	0, 93, 176, 0, 92, 125, 4, 2, 0, 93, 68, 1, 93, 202, 
	1, 4, 2, 0, 93, 229, 0, 93, 68, 1, 4, 2, 0, 93, 
	162, 0, 93, 229, 0, 4, 2, 0, 92, 114, 93, 162, 0, 4, 
	2, 0, 92, 114, 93, 229, 0, 4, 2, 0, 92, 110, 93, 220, 
	0, 4, 2, 0, 101, 51, 51, 51, 51, 51, 155, 88, 64, 10, 
	3, 101, 0, 0, 0, 0, 0, 208, 103, 64, 10, 1, 4, 2, 
	0, 101, 205, 204, 204, 204, 204, 4, 103, 64, 10, 2, 101, 51, 
	51, 51, 51, 51, 171, 112, 64, 10, 1, 4, 2, 0, 101, 205, 
	204, 204, 204, 204, 252, 106, 64, 10, 1, 101, 51, 51, 51, 51, 
	51, 163, 116, 64, 10, 1, 4, 2, 0, 101, 205, 204, 204, 204, 
	204, 252, 106, 64, 10, 1, 101, 51, 51, 51, 51, 51, 163, 116, 
	64, 10, 1, 4, 2, 0, 101, 205, 204, 204, 204, 204, 252, 106, 
	64, 10, 1, 101, 205, 204, 204, 204, 204, 12, 115, 64, 10, 1, 
	4, 2, 0, 101, 205, 204, 204, 204, 204, 252, 122, 64, 10, 1, 
	101, 102, 102, 102, 102, 102, 118, 113, 64, 10, 1, 4, 2, 0, 
	101, 205, 204, 204, 204, 204, 252, 106, 64, 10, 1, 101, 154, 153, 
	153, 153, 153, 57, 118, 64, 10, 1, 4, 2, 0, 101, 205, 204, 
	204, 204, 204, 252, 106, 64, 10, 1, 101, 102, 102, 102, 102, 102, 
	118, 113, 64, 10, 1, 4, 2, 0, 101, 205, 204, 204, 204, 204, 
	252, 106, 64, 10, 1, 101, 102, 102, 102, 102, 102, 118, 113, 64, 
	10, 1, 4, 2, 0, 101, 205, 204, 204, 204, 204, 252, 106, 64, 
	10, 1, 101, 102, 102, 102, 102, 102, 118, 113, 64, 10, 1, 4, 
	2, 0, 93, 215, 0, 93, 19, 1, 4, 2, 0, 101, 102, 102, 
	102, 102, 102, 118, 97, 64, 10, 1, 101, 205, 204, 204, 204, 204, 
	252, 106, 64, 10, 1, 4, 2, 0, 101, 102, 102, 102, 102, 102, 
	118, 113, 64, 10, 1, 101, 205, 204, 204, 204, 204, 252, 122, 64, 
	10, 1, 4, 2, 0, 101, 51, 51, 51, 51, 51, 157, 119, 64, 
	10, 3, 101, 102, 102, 102, 102, 102, 118, 113, 64, 10, 1, 4, 
	2, 0, 4, 41, 0, 110, 7
   };

   hb_vmExecute( pcode, symbols, NULL );
}

HB_FUNC( VPIX2MM )

{
   static const BYTE pcode[] =
   {
13, 8, 1, 133, 107, 0, 126, 2, 0, 0, 134, 1, 108, 10, 
	100, 106, 8, 68, 73, 83, 80, 76, 65, 89, 0, 121, 121, 121, 
	12, 4, 80, 3, 134, 2, 108, 11, 100, 95, 3, 92, 8, 12, 
	2, 80, 4, 134, 3, 108, 11, 100, 95, 3, 92, 10, 12, 2, 
	80, 5, 134, 4, 108, 11, 100, 95, 3, 92, 4, 12, 2, 80, 
	6, 134, 5, 108, 11, 100, 95, 3, 92, 6, 12, 2, 80, 7, 
	134, 6, 95, 4, 95, 6, 18, 80, 8, 134, 7, 95, 5, 95, 
	7, 18, 80, 9, 134, 9, 108, 12, 100, 95, 3, 20, 1, 134, 
	11, 95, 1, 95, 9, 18, 80, 2, 134, 13, 95, 2, 110, 7
   };

   hb_vmExecute( pcode, symbols, NULL );
}

HB_FUNC( HPIX2MM )

{
   static const BYTE pcode[] =
   {
13, 8, 1, 133, 125, 0, 126, 2, 0, 0, 134, 1, 108, 10, 
	100, 106, 8, 68, 73, 83, 80, 76, 65, 89, 0, 121, 121, 121, 
	12, 4, 80, 3, 134, 2, 108, 11, 100, 95, 3, 92, 8, 12, 
	2, 80, 4, 134, 3, 108, 11, 100, 95, 3, 92, 10, 12, 2, 
	80, 5, 134, 4, 108, 11, 100, 95, 3, 92, 4, 12, 2, 80, 
	6, 134, 5, 108, 11, 100, 95, 3, 92, 6, 12, 2, 80, 7, 
	134, 6, 95, 4, 95, 6, 18, 80, 8, 134, 7, 95, 5, 95, 
	7, 18, 80, 9, 134, 9, 108, 12, 100, 95, 3, 20, 1, 134, 
	11, 95, 1, 95, 8, 18, 80, 2, 134, 13, 95, 2, 110, 7
   };

   hb_vmExecute( pcode, symbols, NULL );
}

HB_FUNC( VMM2PIX )

{
   static const BYTE pcode[] =
   {
13, 8, 1, 133, 143, 0, 126, 2, 0, 0, 134, 1, 108, 10, 
	100, 106, 8, 68, 73, 83, 80, 76, 65, 89, 0, 121, 121, 121, 
	12, 4, 80, 3, 134, 2, 108, 11, 100, 95, 3, 92, 8, 12, 
	2, 80, 4, 134, 3, 108, 11, 100, 95, 3, 92, 10, 12, 2, 
	80, 5, 134, 4, 108, 11, 100, 95, 3, 92, 4, 12, 2, 80, 
	6, 134, 5, 108, 11, 100, 95, 3, 92, 6, 12, 2, 80, 7, 
	134, 6, 95, 4, 95, 6, 18, 80, 8, 134, 7, 95, 5, 95, 
	7, 18, 80, 9, 134, 9, 108, 12, 100, 95, 3, 20, 1, 134, 
	11, 95, 1, 95, 9, 65, 80, 2, 134, 13, 95, 2, 110, 7
   };

   hb_vmExecute( pcode, symbols, NULL );
}

HB_FUNC( HMM2PIX )

{
   static const BYTE pcode[] =
   {
13, 8, 1, 133, 161, 0, 126, 2, 0, 0, 134, 1, 108, 10, 
	100, 106, 8, 68, 73, 83, 80, 76, 65, 89, 0, 121, 121, 121, 
	12, 4, 80, 3, 134, 2, 108, 11, 100, 95, 3, 92, 8, 12, 
	2, 80, 4, 134, 3, 108, 11, 100, 95, 3, 92, 10, 12, 2, 
	80, 5, 134, 4, 108, 11, 100, 95, 3, 92, 4, 12, 2, 80, 
	6, 134, 5, 108, 11, 100, 95, 3, 92, 6, 12, 2, 80, 7, 
	134, 6, 95, 4, 95, 6, 18, 80, 8, 134, 7, 95, 5, 95, 
	7, 18, 80, 9, 134, 9, 108, 12, 100, 95, 3, 20, 1, 134, 
	11, 95, 1, 95, 8, 65, 80, 2, 134, 13, 95, 2, 110, 7
   };

   hb_vmExecute( pcode, symbols, NULL );
}

HB_FUNC( ATOKENS )

{
   static const BYTE pcode[] =
   {
13, 3, 2, 133, 179, 0, 126, 3, 1, 0, 134, 1, 4, 0, 
	0, 80, 4, 134, 3, 95, 2, 100, 8, 28, 12, 127, 2, 2, 
	0, 32, 0, 95, 2, 25, 3, 100, 73, 95, 1, 95, 2, 72, 
	80, 1, 134, 7, 108, 17, 100, 108, 18, 100, 95, 1, 95, 3, 
	125, 3, 1, 0, 95, 2, 12, 3, 21, 80, 5, 12, 1, 31, 
	15, 134, 8, 108, 19, 100, 95, 4, 95, 5, 20, 2, 25, 218, 
	134, 11, 95, 4, 110, 7
   };

   hb_vmExecute( pcode, symbols, NULL );
}

HB_FUNC( STRTRIM )

{
   static const BYTE pcode[] =
   {
13, 0, 1, 108, 21, 100, 108, 22, 100, 95, 1, 12, 1, 12, 
	1, 110, 7
   };

   hb_vmExecute( pcode, symbols, NULL );
}

HB_FUNC( MEMOWRITEX )

{
   static const BYTE pcode[] =
   {
13, 1, 2, 133, 201, 0, 108, 24, 100, 95, 1, 121, 12, 2, 
	80, 3, 134, 1, 108, 25, 100, 95, 3, 95, 2, 20, 2, 134, 
	2, 108, 26, 100, 95, 3, 20, 1, 134, 4, 121, 110, 7
   };

   hb_vmExecute( pcode, symbols, NULL );
}

HB_FUNC( C5SIMBOL )

{
   static const BYTE pcode[] =
   {
13, 5, 6, 133, 213, 0, 95, 4, 100, 8, 28, 8, 9, 21, 
	80, 4, 25, 3, 100, 73, 108, 28, 100, 95, 1, 122, 12, 2, 
	80, 10, 134, 3, 48, 29, 0, 108, 30, 100, 12, 0, 106, 8, 
	77, 97, 114, 108, 101, 116, 116, 0, 121, 92, 246, 9, 9, 100, 
	100, 100, 9, 9, 9, 122, 112, 12, 80, 7, 134, 4, 108, 31, 
	100, 95, 1, 48, 32, 0, 95, 7, 112, 0, 12, 2, 80, 8, 
	134, 5, 95, 2, 95, 3, 95, 2, 128, 10, 0, 95, 3, 128, 
	9, 0, 4, 4, 0, 80, 9, 134, 6, 108, 33, 100, 95, 1, 
	95, 6, 28, 5, 121, 25, 7, 97, 128, 128, 128, 0, 12, 2, 
	80, 11, 134, 7, 108, 34, 100, 95, 1, 95, 9, 122, 1, 128, 
	1, 0, 95, 9, 92, 2, 1, 95, 5, 20, 4, 134, 8, 108, 
	33, 100, 95, 1, 95, 11, 20, 2, 134, 9, 108, 31, 100, 95, 
	1, 95, 8, 20, 2, 134, 10, 48, 35, 0, 95, 7, 112, 0, 
	73, 134, 11, 108, 28, 100, 95, 1, 95, 10, 20, 2, 134, 12, 
	95, 4, 28, 13, 134, 13, 108, 36, 100, 95, 1, 95, 9, 20, 
	2, 134, 16, 95, 9, 110, 7
   };

   hb_vmExecute( pcode, symbols, NULL );
}

HB_FUNC( C5GETFONTNAMES )

{
   static const BYTE pcode[] =
   {
13, 2, 0, 133, 236, 0, 108, 38, 100, 48, 39, 0, 108, 40, 
	100, 12, 0, 112, 0, 12, 1, 80, 1, 134, 1, 108, 41, 100, 
	95, 1, 12, 1, 80, 2, 134, 2, 108, 42, 100, 95, 2, 12, 
	1, 80, 2, 134, 3, 108, 43, 100, 48, 39, 0, 108, 40, 100, 
	12, 0, 112, 0, 95, 1, 20, 2, 134, 5, 95, 2, 110, 7
   };

   hb_vmExecute( pcode, symbols, NULL );
}

HB_FUNC( EDITBMP )

{
   static const BYTE pcode[] =
   {
13, 2, 1, 133, 246, 0, 108, 21, 100, 108, 45, 100, 108, 46, 
	100, 12, 0, 12, 1, 12, 1, 80, 2, 134, 2, 95, 1, 100, 
	8, 28, 11, 127, 1, 1, 0, 0, 95, 1, 25, 3, 100, 73, 
	108, 47, 100, 95, 2, 12, 1, 80, 2, 134, 5, 95, 2, 130, 
	1, 0, 106, 2, 92, 0, 8, 28, 23, 134, 6, 108, 48, 100, 
	95, 2, 108, 49, 100, 95, 2, 12, 1, 128, 255, 255, 12, 2, 
	80, 2, 134, 9, 108, 50, 100, 108, 51, 100, 106, 60, 70, 105, 
	99, 104, 101, 114, 111, 32, 103, 114, 225, 102, 105, 99, 111, 32, 
	124, 32, 42, 46, 66, 77, 80, 59, 42, 46, 68, 67, 88, 59, 
	42, 46, 71, 73, 70, 59, 42, 46, 74, 80, 71, 59, 42, 46, 
	80, 67, 88, 59, 42, 46, 84, 73, 70, 59, 42, 46, 80, 78, 
	71, 0, 106, 18, 83, 101, 108, 101, 99, 99, 105, 111, 110, 101, 
	32, 105, 109, 97, 103, 101, 110, 0, 12, 2, 12, 1, 80, 3, 
	134, 11, 108, 17, 100, 95, 3, 12, 1, 31, 19, 134, 12, 108, 
	52, 100, 95, 3, 95, 2, 106, 2, 46, 0, 12, 3, 80, 1, 
	134, 15, 108, 53, 100, 20, 0, 134, 17, 48, 54, 0, 108, 55, 
	100, 12, 0, 120, 112, 1, 73, 134, 19, 95, 1, 110, 7
   };

   hb_vmExecute( pcode, symbols, NULL );
}

HB_FUNC( EDITTEXT )

{
   static const BYTE pcode[] =
   {
13, 12, 1, 133, 17, 1, 95, 1, 80, 4, 134, 3, 9, 80, 
	7, 134, 5, 108, 57, 100, 95, 4, 93, 232, 3, 12, 2, 80, 
	9, 134, 13, 48, 29, 0, 108, 58, 100, 12, 0, 93, 3, 1, 
	93, 146, 0, 93, 99, 2, 93, 232, 2, 106, 13, 69, 100, 105, 
	116, 97, 114, 32, 116, 101, 120, 116, 111, 0, 100, 100, 9, 100, 
	100, 100, 100, 100, 120, 100, 100, 100, 100, 100, 9, 112, 20, 80, 
	8, 134, 16, 48, 29, 0, 108, 59, 100, 12, 0, 92, 25, 92, 
	28, 89, 28, 0, 1, 0, 1, 0, 9, 0, 108, 60, 100, 12, 
	0, 121, 8, 28, 6, 95, 255, 25, 7, 95, 1, 21, 80, 255, 
	6, 95, 8, 93, 249, 0, 92, 105, 100, 9, 100, 100, 100, 120, 
	100, 9, 100, 9, 9, 9, 100, 100, 9, 100, 100, 112, 23, 80, 
	10, 134, 19, 48, 29, 0, 108, 61, 100, 12, 0, 93, 143, 0, 
	93, 153, 0, 106, 8, 65, 99, 101, 112, 116, 97, 114, 0, 95, 
	8, 89, 22, 0, 0, 0, 2, 0, 7, 0, 8, 0, 120, 80, 
	255, 48, 35, 0, 95, 254, 112, 0, 6, 92, 44, 92, 12, 100, 
	100, 9, 120, 9, 100, 9, 100, 100, 9, 112, 17, 80, 11, 134, 
	22, 48, 29, 0, 108, 61, 100, 12, 0, 93, 143, 0, 93, 199, 
	0, 106, 9, 67, 97, 110, 99, 101, 108, 97, 114, 0, 95, 8, 
	89, 17, 0, 0, 0, 1, 0, 8, 0, 48, 35, 0, 95, 255, 
	112, 0, 6, 92, 44, 92, 12, 100, 100, 9, 120, 9, 100, 9, 
	100, 100, 9, 112, 17, 80, 12, 134, 25, 48, 29, 0, 108, 61, 
	100, 12, 0, 93, 143, 0, 93, 244, 0, 106, 6, 65, 121, 117, 
	100, 97, 0, 95, 8, 100, 92, 44, 92, 12, 100, 100, 9, 120, 
	9, 100, 9, 100, 100, 9, 112, 17, 80, 13, 134, 27, 48, 62, 
	0, 95, 8, 48, 63, 0, 95, 8, 112, 0, 48, 64, 0, 95, 
	8, 112, 0, 48, 65, 0, 95, 8, 112, 0, 120, 100, 100, 100, 
	48, 66, 0, 95, 8, 112, 0, 100, 100, 112, 10, 73, 134, 31, 
	95, 9, 110, 7
   };

   hb_vmExecute( pcode, symbols, NULL );
}

HB_FUNC( EDITDBF )

{
   static const BYTE pcode[] =
   {
13, 2, 1, 133, 54, 1, 108, 21, 100, 108, 45, 100, 108, 46, 
	100, 12, 0, 12, 1, 12, 1, 80, 2, 134, 1, 95, 1, 80, 
	3, 134, 2, 108, 47, 100, 95, 2, 12, 1, 80, 2, 134, 4, 
	95, 2, 130, 1, 0, 106, 2, 92, 0, 8, 28, 23, 134, 5, 
	108, 48, 100, 95, 2, 108, 49, 100, 95, 2, 12, 1, 128, 255, 
	255, 12, 2, 80, 2, 134, 8, 108, 50, 100, 108, 51, 100, 106, 
	6, 42, 46, 100, 98, 102, 0, 106, 15, 83, 101, 108, 101, 99, 
	99, 105, 111, 110, 101, 32, 68, 98, 102, 0, 12, 2, 12, 1, 
	80, 3, 134, 10, 108, 17, 100, 95, 3, 12, 1, 31, 19, 134, 
	11, 108, 52, 100, 95, 3, 95, 2, 106, 2, 46, 0, 12, 3, 
	80, 1, 134, 14, 108, 53, 100, 20, 0, 134, 16, 48, 54, 0, 
	108, 55, 100, 12, 0, 120, 112, 1, 73, 134, 18, 95, 1, 110, 
	7
   };

   hb_vmExecute( pcode, symbols, NULL );
}

HB_FUNC( GETFIELDS )

{
   static const BYTE pcode[] =
   {
13, 4, 1, 133, 79, 1, 4, 0, 0, 80, 2, 134, 1, 4, 
	0, 0, 80, 3, 134, 5, 108, 17, 100, 95, 1, 12, 1, 31, 
	88, 134, 7, 108, 69, 100, 120, 100, 95, 1, 106, 5, 116, 101, 
	115, 116, 0, 20, 4, 134, 9, 85, 108, 70, 74, 108, 71, 100, 
	12, 0, 119, 80, 3, 134, 11, 126, 4, 1, 0, 95, 4, 108, 
	49, 100, 95, 3, 12, 1, 34, 28, 26, 134, 12, 108, 19, 100, 
	95, 2, 95, 3, 95, 4, 1, 122, 1, 20, 2, 134, 13, 125, 
	4, 1, 0, 25, 222, 134, 15, 85, 108, 70, 74, 108, 72, 100, 
	20, 0, 74, 134, 19, 95, 2, 110, 7
   };

   hb_vmExecute( pcode, symbols, NULL );
}

HB_FUNC( TPENEXT )

{
   static const BYTE pcode[] =
   {
13, 2, 255, 116, 98, 0, 126, 2, 1, 0, 103, 1, 0, 100, 
	8, 29, 68, 1, 48, 29, 0, 108, 74, 100, 12, 0, 106, 8, 
	84, 80, 101, 110, 69, 120, 116, 0, 108, 75, 100, 12, 0, 112, 
	2, 82, 1, 0, 133, 103, 1, 48, 76, 0, 103, 1, 0, 100, 
	100, 95, 2, 106, 5, 104, 80, 101, 110, 0, 4, 1, 0, 9, 
	9, 112, 6, 73, 134, 1, 48, 76, 0, 103, 1, 0, 100, 100, 
	95, 2, 106, 7, 110, 87, 105, 100, 116, 104, 0, 106, 7, 110, 
	67, 111, 108, 111, 114, 0, 4, 2, 0, 9, 9, 112, 6, 73, 
	134, 2, 48, 76, 0, 103, 1, 0, 100, 100, 95, 2, 106, 8, 
	111, 68, 101, 118, 105, 99, 101, 0, 4, 1, 0, 9, 9, 112, 
	6, 73, 134, 4, 48, 77, 0, 103, 1, 0, 106, 4, 78, 101, 
	119, 0, 108, 78, 14, 95, 2, 128, 16, 0, 9, 112, 4, 73, 
	134, 5, 48, 79, 0, 103, 1, 0, 106, 8, 82, 101, 108, 101, 
	97, 115, 101, 0, 89, 28, 0, 1, 0, 0, 0, 108, 6, 100, 
	48, 80, 0, 95, 1, 112, 0, 20, 1, 48, 81, 0, 95, 1, 
	121, 112, 1, 6, 95, 2, 9, 112, 4, 73, 134, 6, 48, 79, 
	0, 103, 1, 0, 106, 4, 69, 110, 100, 0, 89, 28, 0, 1, 
	0, 0, 0, 108, 6, 100, 48, 80, 0, 95, 1, 112, 0, 20, 
	1, 48, 81, 0, 95, 1, 121, 112, 1, 6, 95, 2, 9, 112, 
	4, 73, 134, 8, 48, 82, 0, 103, 1, 0, 112, 0, 73, 48, 
	83, 0, 103, 1, 0, 112, 0, 151, 108, 84, 100, 48, 83, 0, 
	103, 1, 0, 112, 0, 12, 1, 80, 1, 108, 85, 100, 95, 1, 
	106, 10, 73, 110, 105, 116, 67, 108, 97, 115, 115, 0, 12, 2, 
	28, 32, 48, 86, 0, 95, 1, 108, 87, 100, 12, 0, 112, 1, 
	73, 25, 17, 108, 84, 100, 48, 83, 0, 103, 1, 0, 112, 0, 
	12, 1, 80, 1, 108, 60, 100, 12, 0, 121, 15, 28, 19, 48, 
	88, 0, 103, 1, 0, 95, 1, 108, 87, 100, 12, 0, 112, 2, 
	110, 7, 95, 1, 110, 7
   };

   hb_vmExecute( pcode, symbols, NULL );
}

HB_FUNC_STATIC( TPENEXT_NEW )

{
   static const BYTE pcode[] =
   {
13, 1, 3, 102, 80, 4, 133, 118, 1, 95, 1, 100, 8, 28, 
	10, 126, 1, 1, 0, 95, 1, 25, 3, 100, 73, 95, 2, 100, 
	8, 28, 10, 126, 2, 0, 0, 95, 2, 25, 3, 100, 73, 95, 
	3, 100, 69, 28, 42, 134, 3, 48, 89, 0, 95, 4, 48, 90, 
	0, 95, 3, 112, 0, 92, 72, 18, 48, 91, 0, 95, 4, 112, 
	0, 65, 112, 1, 73, 134, 4, 48, 92, 0, 95, 4, 95, 3, 
	112, 1, 73, 134, 7, 48, 81, 0, 95, 4, 108, 93, 100, 95, 
	1, 95, 2, 12, 2, 112, 1, 73, 134, 8, 48, 89, 0, 95, 
	4, 95, 1, 112, 1, 73, 134, 9, 48, 94, 0, 95, 4, 95, 
	2, 112, 1, 73, 134, 12, 95, 4, 110, 7
   };

   hb_vmExecute( pcode, symbols, NULL );
}

HB_FUNC_INITSTATICS()

{
   static const BYTE pcode[] =
   {
117, 98, 0, 1, 0, 7
   };

   hb_vmExecute( pcode, symbols, NULL );
}

